FORMAT: 1A
HOST: https://atmobeta.iplantc.org/api/v2

# Atmosphere
Atmosphere is a private, self-service cloud computing platform that supports research efforts in the plant sciences
community.  It addresses the growing need for customized computational resources and provides the community with
access to:
  
  1. Infrastructure as a Service (IaaS), accessible through a web portal or by API
  2. Platform as a Service (PaaS), for developing and deploying software to the scientific community
  3. Software as a Service (SaaS), with preconfigured, frequently used analysis routines, algorithms, and
  datasets designed to accommodate computationally and data-intensive bioinformatics tasks.

<span style="color:orange;">NOTE: These API docs are currently IN DEVELOPMENT.</span>
 
## Useful Links

   - [Atmosphere Homepage](http://www.iplantcollaborative.org/ci/atmosphere)
   - [Atmosphere on GitHub](https://github.com/iPlantCollaborativeOpenSource/atmosphere)

## Pagination
All collections that support pagination will return a paginated list.  The collections that do not support pagination
 will not return a paginated list (all results that exist will be returned).  Since Atmosphere uses Django Rest Framework
 as the API framework, it is reasonable to allow whatever is most natural to implement in that framework to flavor the
 language of the API.  To that end, the following query parameters control pagination:

   - **page**: the page of results to return
   - **page_size**: the number of results per page

## Authorization
Except where explicitly stated (images, tags) all endpoints require authorization.  This is achieved by obtaining an
 access token and placing the token in the Authorization Header like so:

    Authorization: TOKEN [access_token]

# Group Allocation -done-
Allocations represent Atmosphere AU values.

## Allocation [/allocations/{id}]
A single Allocation object.

Each Allocation has the following properties:

- **id**: unique id for the provider
- **threshold**: amount of CPU minutes allocated

+ Parameters
    + id (required, number) ... `id` of the Allocation.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "threshold": 10080
            }


### Retrieve an Allocation [GET]
+ Response 200 (application/json)

    [Allocation][]

## Allocation Collection [/allocations]
Collection of all Providers.

+ Model (application/json)

    JSON representation of Allocation Collection Resource.

    + Body
        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "threshold": 10080
                },
                {
                    "id": 2,
                    "threshold": 20160
                }
            ]
        }

### List all Allocations [GET]
+ Response 200 (application/json)

    [Allocation Collection][]

# Group Identities -done-
Identities are like user account information. A user has at least one identity per provider, and each identity
 contains information about how many resources can be consumed on that provider.  If a user has multiple identities
 under a single provider, it means they can allocate more resources by using a different identity.

## Identity [/identities/{id}]
A single Identity object.

Each Identity has the following properties:

- **id**: id of the identity
- **uuid**: uuid for the identity
- **quota**: quota assigned to the identity
- **allocation**: allocation assigned to the identity
- **provider**: provider the identity is for
- **user**: user this identity belongs to

+ Parameters
    + id (required, number) ... `id` of the Identity.
    
+ Model (application/json)

    JSON representation of Identity Resource.

    + Body

            {
                "id": 1,
                "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1"
                "quota": {
                    "id": 1
                },
                "allocation": {
                    "id": 1
                },
                "provider": {
                    "id": 1,
                    "uuid": "c9b2829c-da3f-11e4-9e60-7780dea86e3f"
                },
                "user":{
                    "id": 1
                }
            }

### Retrieve an Identity [GET]

+ Response 200 (application/json)

    [Identity][]
    
## Identity Collection [/identities]
Collection of all Identities.

+ Model (application/json)

    JSON representation of Identity Collection Resource.

    + Body

            {
            "count": 2,
            "next": null,
            "prev": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "quota": {
                        "id": 1
                    },
                    "allocation": {
                        "id": 1
                    },
                    "provider": {
                        "id": 1,
                        "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1"
                    },
                    "user":{
                        "id": 1
                    }
                },
                {
                    "id": 2,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec2",
                    "quota": {
                        "id": 1
                    },
                    "allocation": {
                        "id": 1
                    },
                    "provider": {
                        "id": 2,
                        "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec2"
                    },
                    "user":{
                        "id": 2
                    }
                }
            ]
            }
            
### List all Identities [GET]
+ Response 200 (application/json)

    [Identity Collection][]

# Group Images -done-
Images are snapshots of an instance at some point in time, including all programs and files.  They can be used to create
 a clone of an instance for others to use, or simply to save the state of an instance as a backup or recovery.

## Image [/images/{id}]
A single Image object.

Each Image has the following properties:

- **id**: id of the image
- **uuid**: unique id of image
- **name**: name of image
- **description**: description of image
- **icon**: (optional) if a custom display icon has been uploaded for this image, this field will contain the relative
 path to that image (e.g. "/images/icon.png")
- **created_by**: id of user who created the image
- **tags**: image tags
- **start_date**: the date the image was created
- **end_date**: Atmosphere implements soft deletes for everything (or nearly everything).  Any images with an
 end_date before the moment the request was made will be filtered out of the result set.  however, end_dates can also be
 used to schedule resources deletion by setting them at a future date.  This can also be used to give someone access to
 a resource for a limited time (such as for a workshop session).
- **provider_images**: provider images this image is associated with


+ Parameters
    + id (required, number) ... id of the Image.
    
+ Model (application/json)

    JSON representation of Image Resource.

    + Body

        {
            "id": 1,
            "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
            "name": "name",
            "description": "description",
            "icon": null,
            "created_by": {
                "id": 1
            },
            "provider_images": [
                {
                    "id": 872,
                    "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                }
            ],
            "start_date": "2015-03-30T18:30:45.501948Z",
            "end_date": null
        }

### Retrieve a Single Image [GET]
+ Response 200 (application/json)

    [Image][]
    
### Edit an Image [PATCH]
Images can only be edited by the user who created it.

+ Request
    + Body
        {
            "name": "new name",
            "description": "new description",
        }
        
+ Response 200 (application/json)

    [Image][]

## Image Collection [/images{?created_by__username, tags__name, search}]
Collection of all Images.

This is both a public and private endpoint.  If accessed without being authenticated you will get a list of all public
 images.  If authenticated, you will also get any private images you have permission to use.

+ Model (application/json)

    JSON representation of the Images Collection.

    + Body

        {
            "count": 1,
            "next": "null",
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "name": "name",
                    "description": "description",
                    "icon": null,
                    "created_by": {
                        "id": 1
                    },
                    "provider_images": [
                        {
                            "id": 872,
                            "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                        }
                    ],
                    "start_date": "2015-03-30T18:30:45.501948Z",
                    "end_date": null
                }
            ]
        }


### List all Images [GET]

+ Parameters
    + created_by__username (string, optional) ... return images created by user with `username`
    + tags__name (string, optional) ... return images with a tag of this `name`
    + search (string, optional) ... return images whose name, description, or tag name or description match the search criteria

+ Response 200 (application/json)

    [Image Collection][]

# Group Image Bookmarks -done-
Image Bookmarks

## Image Bookmark [/image_bookmarks/{id}]
A single Image Bookmark object.

Each Image Bookmark has the following properties:

- **id**: id for the bookmark
- **image**: image bookmarked
- **user**: user who created the bookmark

+ Parameters
    + id (required, number) ... `id` of the Image Bookmark.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

        {
            "id": 1,
            "image": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "user": {
                "id": 1
            }
        }


### Retrieve an Image Bookmark [GET]
+ Response 200 (application/json)

    [Image Bookmark][]


### Delete an Image Bookmark [DELETE]
+ Response 204 (application/json)


## Image Bookmark Collection [/image_bookmarks]
Collection of all Image Bookmarks.

+ Model (application/json)

    JSON representation of Image Bookmark Resource.

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "url": "https://atmobeta.iplantc.org/api/v2/image_bookmarks/1",
                    "image": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "user": {
                        "id": 1
                    }
                }
            ]

### List all Image Bookmarks [GET]
+ Response 200 (application/json)

    [Image Bookmark Collection][]

### Create an Image Bookmark [POST]
You must specify the following properties. The user will be set to you.

- **image**: the image to bookmark

+ Request (application/json)

        {
            "image": 1
        }

+ Response 201 (application/json)

    [Image Bookmark][]

# Group Image Tags -done-
An image tag is a link between an image and a tag

## Image Tag [/image_tags/{id}]
A single Image Tag object.

Each Image Tag has the following properties:

- **id**: id for the image tag
- **image**: image that is tagged
- **tag**: tag attached to image


+ Parameters
    + id (required, number) ... `id` of the Image Tag.

+ Model(application/json)

    + Body

        {
            "id": 1,
            "image": {
                "id": 1,
                "uuid": "f85e84e6-0851-57a5-a2dc-fb702e5a66a4"
            },
            "tag": {
                "id": 1
            }
        }


### Retrieve an Image Tag [GET]
+ Response 200 (application/json)

    [Image Tag][]

### Delete an Image Tag [DELETE]
+ Response 204 (application/json)

## Image Tag Collection [/image_tags{?application__id}]
Collection of all Image Tags.

+ Parameters
    + application__id (number, optional) ... return Image Tags belong to the Image with this 'id'

+ Model (application/json)

    JSON representation of Image Tag Collection Resource.

    + Body

        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "id": 1,
                "image": {
                    "id": 1,
                    "uuid": "f85e84e6-0851-57a5-a2dc-fb702e5a66a4"
                },
                "tag": {
                    "id": 1
                }
            }
        ]

### List all Image Tags [GET]
+ Response 200 (application/json)

    [Image Tag Collection][]

### Create an Image Tag [POST]
+ Request (application/json)

    {
        "image": 1,
        "tag": 1
    }
        
+ Response 200 (application/json)

    [Image Tag][]

# Group Instances -done-
Instances are virtual machines that users have created from an image.  When a user creates an instance
 it immediately starts deducting AU's from their account.

## Instance [/instances/{id}]
A single Instance object.

Each Instance has the following properties:

- **id**: id
- **uuid**: unique id
- **name**: name of the instance
- **status**: the state the instance is in (active, suspended, shutoff, etc.)
- **size**: the size of the instance (number of CPUs, RAM, and Disk Space)
- **ip_address**: IP address you can use to connect to the machine.  Address that start with 196, 178, or 10 are private,
 all others are public.  Instances with an IP address of 0.0.0.0 have not been assigned an IP address yet.
- **shell**: true if a user can ssh into the instance
- **vnc**: true if a user can remote desktop into the instance
- **identity**: which account the instance deducts AU's from
- **user**: username for the person who created the instance
- **provider**: the provider the instance is on
- **image**: The specific version of an image the instance was created from
- **start_date**: date the instance was created
- **end_date**: end date of instance

+ Parameters
    + id (required, number) ... 'id' of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Resource.

    + Body

        {
            "id": 1,
            "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
            "name": "Ubuntu 12.04.5 - iPlant Base",
            "status": "suspended",
            "size": {
                "id": 23
            },
            "ip_address": "0.0.0.0",
            "shell": true,
            "vnc": true,
            "identity": {
                "id": 6512,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "user": {
                "id": 3178
            },
            "provider": {
                "id": 4,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "image": {
                "id": 868,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "start_date": "2015-02-16T19:24:26Z",
            "end_date": null
        }

### Retrieve an Instance [GET]

+ Response 200 (application/json)

    [Instance][]

### Update an Instance [PATCH]

+ Request

    + Body
    
        {
            "description": "new description"
        }

+ Response 200 (application/json)

    [Instance][]


## Instance Collection [/instances]
Collection of all Instances
    
+ Model (application/json)

    JSON representation of Instances Collection Resource.

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
                    "name": "Ubuntu 12.04.5 - iPlant Base",
                    "status": "suspended",
                    "size": {
                        "id": 23
                    },
                    "ip_address": "0.0.0.0",
                    "shell": true,
                    "vnc": true,
                    "identity": {
                        "id": 6512,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "user": {
                        "id": 3178
                    },
                    "provider": {
                        "id": 4,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "image": {
                        "id": 868,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "start_date": "2015-02-16T19:24:26Z",
                    "end_date": null  
                }
            ]
        }
    
### List all Instances [GET]
Get a list of your instances.

+ Response 200 (application/json)

    [Instance Collection][]

# Group Instance Tag -done-
An instance tag is a link between an image and a tag

## Instance Tag [/instance_tags/{id}]
A single Instance Tag object.

Each Instance Tag has the following properties:

- **id**: id for the instance tag
- **instance**: instance tagged
- **tag**: tag applied to the instance


+ Parameters
    + id (required, number) ... `id` of the Instance Tag.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "instance":{
                    "id": 1
                },
                "tag":{
                    "id": 1
                }
            }


### Retrieve an Instance Tag [GET]
+ Response 200 (application/json)

    [Instance Tag][]

### Delete an Instance Tag [DELETE]
+ Response 200 (application/json)

## Instance Tag Collection [/instance_tags{?instance__id}]
Collection of all Instance Tags.

+ Model (application/json)

    JSON representation of Instance Tag Collection Resource.

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "instance":{
                        "id": 1
                    },
                    "tag":{
                        "id": 1
                    }
                }
            ]

### List all Instance Tags [GET]


+ Parameters
    + instance__id (number, optional) ... `id` of the Instance.

+ Response 200 (application/json)

    [Instance Tag Collection][]

### Create an Instance Tag [POST]

+ Request (application/json)

        {
            "instance": 1,
            "tag": 1
        }

+ Response 201 (application/json)

    [Instance Tag][]

# Group Platform Types -done-

## Platform Type [/platform_types/{id}]
A single Platform Type object.

Each Platform Type has the following properties:

- **id**: id for the Platform Type
- **name**: name of Platform Type
- **start_date**: date Platform Type was created
- **end_date**: date Platform Type was deleted


+ Parameters
    + id (required, number) ... Number `id` of the Platform Type.

+ Model(application/json)

    JSON representation of Platform Type Resource

    + Body

        {
            "id": 1,
            "name": "Xen",
            "start_date": "2013-10-18T07:00:00Z",
            "end_date": null
        }


### Retrieve a Platform Type [GET]
+ Response 200 (application/json)

    [Platform Type][]

## Platform Type Collection [/platform_types]
Collection of all Platform Types.

+ Model (application/json)

    JSON representation of Platform Type Collection Resource.

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "name": "Xen",
                    "start_date": "2013-10-18T07:00:00Z",
                    "end_date": null
                }
            ]
        }

### List all Platform Types [GET]
+ Response 200 (application/json)

    [Platform Type Collection][]

# Group Projects -done-
Projects are a way for users to group related resources.  Right now users can add Instances and Volumes to a project, but
 we also plan to support adding documents, hyperlinks, Images, and letting users control access to their
 Projects (i.e. adding users, removing users, and specifying permissions such as read-only access or modifying content)

## Project [/projects/{id}]
A single Project object.

Each Project has the following properties:

- **id**: the id of the project
- **name**: project name
- **description**: project description
- **owner**: user who created the project
- **start_date**: date of project creation
- **end_date**: date of project deletion

+ Parameters
    + id (number, required) ... id of the Project.
    
+ Model (application/json)

    JSON representation of Project Resource.

    + Body
    
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/projects/1",
            "name": "project",
            "description": "my project full of things",
            "owner": {
                "id": 1
            },
            "start_date": "2015-03-16T19:32:18.070860Z",
            "end_date": null
        }

### Retrieve a Project [GET]
+ Response 200 (application/json)

    [Project][]
        
### Update a Project [PATCH]
+ Request (application/json)
  
        {
            "name": "new name",
            "description": "A new description for my project."
        }

+ Response 200 (application/json)

    [Project][]
    
### Delete a Project [DELETE]
Delete a Project.  Projects can only be deleted once all resources (instances and volumes) have been transferred out of
 it or deleted.  Attempting to delete a project with resources still inside will return a status code of 409 (conflict)

+ Response 200 (application/json)

    [Project][]


## Projects Collection [/projects]
Collection of all Projects.

+ Model (application/json)

    JSON representation of Projects Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results":
            [
                {
                    "id": 1,
                    "name": "project",
                    "description": "my project full of things",
                    "owner": {
                        "id": 1
                    },
                    "start_date": "2015-03-16T19:32:18.070860Z",
                    "end_date": null
                }
            ]
        }


### List all Projects [GET]
+ Response 200 (application/json)

    [Projects Collection][]

### Create a Project [POST]
Create a Project.  You must specify the following properties:

- **name**: a name for the project
- **description**: a description of the project

+ Request (application/json)

        {
            "name": "My Awesome Project",
            "description": "A description of my awesome project."
        }

+ Response 201 (application/json)
  [Project][]

# Group Project Instances -done-

## Project Instance [/project_instances/{id}]
Get a single project instance

Each Project Instance has the following properties

- **id**: the id of the project instance
- **project**: project the instance is a part of
- **instance** instance that is part of the project

+ Parameters
  + id (number, required) ... 'id' of the Project Instance.

+ Model (application/json)

    JSON representation of Project Resource

    + Body
    
        {
            "id": 1,
            "project": {
                "id": 1
            },
            "instance": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            }
        }

### Retrieve a single Project Instance [GET]

+ Response 200 (application/json)

    [Project Instance][]

### Remove Instance from Project [DELETE]

  + Response 204 (application/json)

## Project Instance Collection [/project_instances{?project__id}]

+ Parameters
  + project__id (number, optional) ... 'id' of project to filter by

+ Model (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "project": {
                        "id": 1
                    },
                    "instance": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    }
                }
            ]
        }

### List all project instances [GET]

+ Response 200(application/json)

    [Project Instance Collection][]


### Add Instance to Project [POST]
Add instance to project. You must specify the following properties:

 - **project**: project id
 - **instance**: instance id

+ Request (application/json)

        {
            "project": 1,
            "instance": 1
        }

+ Response 200 (application/json)

    [Project Instance][]

# Group Project Volumes -done-

## Project Volume [/project_volumes/{id}]
A single Project Volume object

Each Project Volume has the following properties:
- **id**: id of project volume relationship
- **project**: project with volume attached
- **volume**: volume attached to project

+ Parameters
    + id (required, number) ... 'id' of the Project Volume

+ Model (application/json)

    JSON representation of Project Volume resource

    + Body

        {
            "id": 1,
            "project": {
                "id": 1
            },
            "volume": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            }
        }

### Retrieve a Project Volume resource [GET]

+ Response 200 (application/json)
    [Project Volume][]

### Update a Project Volume [PATCH]

+ Response 204 (application/json)
    [Project Volume][]

### Delete a Project Volume [DELETE]

+ Response 204 (application/json)


## Project Volume Collection [/project_volumes{?project__id}]
Collection of all project volume relationships

+ Parameters
    +project__id (number, optional) ... 'id' of the Project

+ Model (application/json)
    JSON representation of Project Volume collection

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "project": {
                        "id": 1
                    },
                    "volume": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    }
                }
            ]
        }


### Get all Project Volumes [GET]

+ Response 200(application/json)

  [Project Volume Collection][]


### Add Volume to Project [POST]
Add volume to project. You must specify the following properties:

- **project**: project id
- **volume**: volume id

+ Request (application/json)

        {
            "project": 1,
            "volume": 1
        }

+ Response 200 (application/json)

    [Project Volume Collection][]

# Group Providers -done-
Providers represent the different cloud providers managed by Atmosphere.

## Provider [/providers/{id}]
A single Provider object.

Each Provider has the following properties:

- **id**: the id for the provider
- **uuid**: uuid for provider
- **name**: name of the provider
- **description**: description of the provider
- **public**: if provider is publicly accessible
- **active**: if provider is active
- **type**: type of provider
- **virtualization**: type of virtualization
- **sizes**: sizes available on this provider
- **start_date**: provider start date
- **end_date**: provider end date


+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
          {
              "id": 4,
              "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
              "name": "iPlant Cloud - Tucson",
              "description": "<No Description Provided>",
              "public": true,
              "active": true,
              "type": {
                  "id": 2
              },
              "virtualization": {
                  "id": 2
              },
              "start_date": "2014-02-04T19:09:20.713175Z",
              "end_date": null
          }


### Retrieve a Provider [GET]
+ Response 200 (application/json)

    [Provider][]

## Provider Collection [/providers]
Collection of all Providers.

+ Model (application/json)

    + Body
    
          {
              "count": 1,
              "next": null,
              "previous": null,
              "results": [
               {
                    "id": 4,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "name": "iPlant Cloud - Tucson",
                    "description": "<No Description Provided>",
                    "public": true,
                    "active": true,
                    "type": {
                        "id": 2
                    },
                    "virtualization": {
                        "id": 2
                    },
                    "start_date": "2014-02-04T19:09:20.713175Z",
                    "end_date": null
               }
              ]
          }
            
### List all Providers [GET]
+ Response 200 (application/json)

    [Provider Collection][]

# Group Provider Machines -done-
Represent the physical virtual machine snapshot that gets launched on a provider.  Whether a provider_machine exists
for a given image and provider determines whether that image can be launched on that provider.
 
## Provider Machine [/provider_machines/{id}]
A single Provider Machine object.

Each Provider Machine has the following properties:

- **id**: the id for the provider machine
- **uuid**: uuid for the provider machine
- **image**: image installed on this provider machine
- **provider**: provider this machine is a part of
- **created_by**: user who created this machine
- **start_date**: date of machine creation
- **end_date**: date of machine termination

+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
        {
            "id": 1,
            "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
            "image": {
                "id": 196,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "provider": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "created_by": {
                "id": 1586
            },
            "start_date": "2013-07-25T07:00:00Z",
            "end_date": null
        }

### Retrieve a Provider Machine [GET]
+ Response 200 (application/json)

    [Provider Machine][]

## Provider Machine Collection [/provider_machines]
Collection of all Provider Machines.

+ Model (application/json)

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
                    "image": {
                        "id": 196,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "provider": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "created_by": {
                        "id": 1586
                    },
                    "start_date": "2013-07-25T07:00:00Z",
                    "end_date": null
                }
            ]

### List all Provider Machines [GET]
+ Response 200 (application/json)

    [Provider Machine Collection][]

# Group Provider Types -done-
The types of cloud providers that Atmosphere supports (OpenStack, Eucalyptus, Amazon EC2, etc.)

## Provider Type [/provider_types/{id}]
A single Provider Type object.

Each Provider Type has the following properties:

- **id**: id for the provider type
- **name**: text name of provider type
- **start_date**: date of provider type creation
- **end_date**: date of provider type deletion

+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
        {
            "id": 1,
            "name": "OpenStack",
            "start_date": "2012-10-29T23:21:36.253000Z",
            "end_date": null
        }

### Retrieve a Provider Type [GET]
+ Response 200 (application/json)

    [Provider Type][]

## Provider Type Collection [/provider_machines]
Collection of all Provider Types.

+ Model (application/json)

    JSON representation of Provider Type Collection Resource.

    + Body

        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
              "id": 1,
              "name": "OpenStack",
              "start_date": "2012-10-29T23:21:36.253000Z",
              "end_date": null
            }
        ]

### List all Provider Machines [GET]
+ Response 200 (application/json)

    [Provider Type Collection][]

# Group Quota -done-
Quotas are available resource allocations on Atmosphere.  They determine the maximum amount of combined CPU, memory,
disk and number of volumes that a user can launch.

## Quota [/quotas/{id}]
A single Quota object.

Each quota request has the following properties:

- **id**: the id of the request
- **cpu**: CPUs allotted to quota
- **memory**: Memory allotted to quota
- **storage**: Storage allotted to quota
- **storage_count**: number of storage units allotted to quota
- **suspended_count**: quota suspended count

+ Parameters
    + id (number, required) ... `id` of the quota request.
    
+ Model (application/json)

    + Body

        {
            "id": 2,
            "cpu": 12,
            "memory": 32,
            "storage": 50,
            "storage_count": 1,
            "suspended_count": 2
        }

### Retrieve a quota [GET]
+ Response 200 (application/json)

    [Quota][]

## Quota Collection [/quotas]
Collection of all Quotas.

+ Model (application/json)

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 2,
                        "cpu": 12,
                        "memory": 32,
                        "storage": 50,
                        "storage_count": 1,
                        "suspended_count": 2
                    }
                ]
            }

### List all Quotas [GET]
+ Response 200 (application/json)

    [Quota Collection][]

# Group Sizes -done-
Sizes represent the different instance configurations offered by that cloud provider.  Each configuration includes the
 number of CPUs, memory, and disk space.  Sizes with fewer resources will consume AUs at a slower rate.

## Size Collection [/sizes{?provider__id}]
    
### List all Sizes [GET]

+ Parameters
    + provider__id (number, optional) ... `id` of the Provider.

+ Response 200 (application/json)


        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "alias": "3",
                    "name": "small1",
                    "cpu": 2,
                    "disk": 0,
                    "mem": 8192,
                    "active": true,
                    "provider": {
                        "id": 1,
                        "uuid": "9e002b3c-d7d2-11e4-8cb8-8bda92940e85"
                    },
                    "start_date": "2014-02-04T21:04:30Z",
                    "end_date": null
                }
            ]
        }
        
## Size [/size/{id}]
A single Size object with all its details.

+ Parameters
    + id (required, number, 1) ... Number `id` of the Size.

### Retrieve a Size [GET]
+ Response 200 (application/json)

    + Body

            {
                "id": 1,
                "alias": "3",
                "name": "small1",
                "cpu": 2,
                "disk": 0,
                "mem": 8192,
                "active": true,
                "provider": {
                    "id": 1,
                    "uuid": "9e002b3c-d7d2-11e4-8cb8-8bda92940e85"
                },
                "start_date": "2014-02-04T21:04:30Z",
                "end_date": null
            }

# Group Tags -done-
Tags are small labels users can apply to various resources and are primarily used to help focus searches.

## Tag [/tags/{id}]
A single Tag object.

Each Tag has the following properties:

- **id**: the id of the tag
- **name**: the name of the tag
- **description**: a description of what the tag means

+ Parameters
    + id (number, required) ... `id` of the Tag.
    
+ Model (application/json)

    + Body

            {
                "id": 5,
                "name": "Ubuntu",
                "description": "A description of Ubuntu"
            }

### Retrieve a Tag [GET]
+ Response 200 (application/json)

    [Tag][]

### Update a Tag [PATCH]
Currently only Atmosphere staff can update tag information.

+ Request (application/json)

        {
            name: "new-name",
            description: "new description of tag"
        }

+ Response 200 (application/json)

    [Tag][]


### Delete a Tag [DELETE]

+ Response 204 (application/json)


## Tag Collection [/tag]
Collection of all Tags.

+ Model (application/json)

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 1,
                        "name": "SpliceGrapher",
                        "description": "A description of SpliceGrapher"
                    }
                ]
            }

### List all Tags [GET]
+ Response 200 (application/json)

    [Tag Collection][]

### Create a Tag [POST]
Create a Tag.  You must specify the following properties:

- **name**: a name for the tag
- **description**: a description of the tag

+ Request (application/json)

        {
            "name": "Tag name",
            "description": "A description of the tag."
        }

+ Response 201 (application/json)

    [Tag][]

# Group Volumes -done-
Volumes are network based storage that a user can attach to any instance.  They can then be detached and attached to a
 different instance.

## Volume [/volumes/{id}]
A single Volume object.

Each Volume has the following properties:

- **id**: id for the volume
- **uuid**: uuid for the volume
- **name**: name of volume
- **size**: id of size of volume
- **user**: user the volume belongs to
- **provider**: provider volume is stored on
- **identity**: identity of volume
- **project**: projects volume is associated with
- **start_date**: date of volume creation
- **end_date**: date of volume deletion

+ Parameters
    + id (number, required) ... id of the Volume.
    
+ Model (application/json)

    JSON representation of Volume Resource.

    + Body
        {
            "id": 1483,
            "uuid": "7ef79cdd-9ac6-4202-8057-7069748c8a0f",
            "url": "https://atmobeta.iplantc.org/api/v2/volumes/1483",
            "name": "name",
            "size": 4,
            "user": {
                "id": 3178
            },
            "provider": {
                "id": 4,
                "uuid": "9cfe2f92-9416-5e0b-a00f-94076df25ef3"
            },
            "identity": {
                "id": 6512,
                "uuid": "f712fa8c-8371-5ffd-a91a-532ef316d3f4"
            },
            "projects": [],
            "start_date": "2015-02-16T19:53:36.190034Z",
            "end_date": null
        }


### Retrieve a Volume [GET]
+ Response 200 (application/json)

    [Volume][]

### Update a Volume [PATCH]
+ Request
    + Body
        {
            name: "new name"
        }


## Volume Collection [/volumes]
Collection of all Volumes.
    
+ Model (application/json)

    JSON representation of Volumes Collection Resource.

    + Body
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1483,
                    "uuid": "7ef79cdd-9ac6-4202-8057-7069748c8a0f",
                    "url": "https://atmobeta.iplantc.org/api/v2/volumes/1483",
                    "name": "name",
                    "size": 4,
                    "user": {
                        "id": 3178
                    },
                    "provider": {
                        "id": 4,
                        "uuid": "9cfe2f92-9416-5e0b-a00f-94076df25ef3"
                    },
                    "identity": {
                        "id": 6512,
                        "uuid": "f712fa8c-8371-5ffd-a91a-532ef316d3f4"
                    },
                    "projects": [],
                    "start_date": "2015-02-16T19:53:36.190034Z",
                    "end_date": null
                }
            ]
        }
    
### List all Volumes [GET]
+ Response 200 (application/json)

    [Volume Collection][]
