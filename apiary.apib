FORMAT: 1A
HOST: https://atmobeta.iplantc.org/api/v2

# Atmosphere
Atmosphere is a private, self-service cloud computing platform that supports research efforts in the plant sciences
community.  It addresses the growing need for customized computational resources and provides the community with
access to:
  
  1. Infrastructure as a Service (IaaS), accessible through a web portal or by API
  2. Platform as a Service (PaaS), for developing and deploying software to the scientific community
  3. Software as a Service (SaaS), with preconfigured, frequently used analysis routines, algorithms, and
  datasets designed to accommodate computationally and data-intensive bioinformatics tasks.

<span style="color:orange;">NOTE: These API docs are currently IN DEVELOPMENT.</span>
 
## Useful Links

   - [Atmosphere Homepage](http://www.iplantcollaborative.org/ci/atmosphere)
   - [Atmosphere on GitHub](https://github.com/iPlantCollaborativeOpenSource/atmosphere)

## Pagination
All collections that support pagination will return a paginated list.  The collections that do not support pagination
 will not return a paginated list (all results that exist will be returned).  Since Atmosphere uses Django Rest Framework
 as the API framework, it is reasonable to allow whatever is most natural to implement in that framework to flavor the
 language of the API.  To that end, the following query parameters control pagination:

   - **page**: the page of results to return
   - **page_size**: the number of results per page

## Authorization
Except where explicitly stated (images, tags) all endpoints require authorization.  This is achieved by obtaining an
 access token and placing the token in the Authorization Header like so:

    Authorization: TOKEN [access_token]

# Group Allocation
Allocations represent Atmosphere AU values.

## Allocation [/allocations/{id}]
A single Allocation object.

Each Allocation has the following properties:

- **id**: unique id for the provider
- **threshold**: amount of CPU minutes allocated
- **delta**: a description of the provider


+ Parameters
    + id (required, number, '1') ... Number `id` of the Provider.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "threshold": 10080,
                "delta": 20160
            }


### Retrieve an Allocation [GET]
+ Response 200 (application/json)

    [Allocation][]

## Allocation Collection [/allocations]
Collection of all Providers.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of Allocation Collection Resource.

    + Body

            "count": 2,
            "next": null,
            "previous": null,
            "results": [
              {
                  "id": 1,
                  "threshold": 10080,
                  "delta": 20160
              },
              {
                  "id": 2,
                  "threshold": 20160,
                  "delta": 20160
              }
            ]

### List all Allocations [GET]
+ Response 200 (application/json)

    [Allocation Collection][]

# Group Identities
Identities are like user account information. A user has at least one identity per provider, and each identity
 contains information about how many resources can be consumed on that provider.  If a user has multiple identities
 under a single provider, it means they can allocate more resources by using a different identity.

## Identity [/identity/{id}]
A single Identity object.

Each Identity has the following properties:

- **id**: id of the Identity
- **uuid**: unique identifier for of Identity
- **quota**: quota of Identity
- **allocation**: allocation of Identity
- **provider**: provider of Identity
- **user**: user of Identity

+ Parameters
    + id (required, number, 1) ... Number `id` of the Identity.
    
+ Model (application/json)

    JSON representation of Identity Resource.

    + Body

            {
                "id": 1,
                "uuid": "abcde-fghij-klmno-pqrst-uvwxy-z"
                "quota": {
                    "id": 1,
                    "cpu" 16,
                    "memory": 16,
                    "storage": 16,
                    "storage_count": 16,
                    "suspended_count": 16
                },
                "allocation": {
                    "id": 1,
                    "threshold": 10080,
                    "delta": 10080
                },
                "provider": {
                    "id": 1,
                    "uuid": "abcde-fghij-klmno-pqrst-uvqxy-z",
                    "name": "iPlant Cloud - Tucson",
                    "description": "<No Description Provided>",
                    "public": true,
                    "active": true,
                    "start_date": "1999-09-09T00:00.000000Z",
                    "end_date": null
                },
                "user":{
                    "id": 1,
                    "username": "atmouser",
                    "first_name": "atmo",
                    "last_name": "user",
                    "email": "atmouser@atmoemail.com",
                    "is_staff": false,
                    "is_superuser": false,
                    "date_joined": "1999-09-09T00:00.000000Z"
                }
            }

### Retrieve an Identity [GET]

+ Response 200 (application/json)

    [Identity][]
    
## Identity Collection [/identities]
Collection of all Identities.

+ Model (application/json)

    JSON representation of Identity Collection Resource.

    + Body

            {
            "count": 2,
            "next": null,
            "prev": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "abcde-fghij-klmno-pqrst-uvwxy-z",
                    "quota": {
                        "id": 1,
                        "cpu" 16,
                        "memory": 16,
                        "storage": 16,
                        "storage_count": 16,
                        "suspended_count": 16
                    },
                    "allocation": {
                        "id": 1,
                        "threshold": 10080,
                        "delta": 10080
                    },
                    "provider": {
                        "id": 1,
                        "uuid": "abcde-fghij-klmno-pqrst-uvqxy-z",
                        "name": "iPlant Cloud - Tucson",
                        "description": "<No Description Provided>",
                        "public": true,
                        "active": true,
                        "start_date": "1999-09-09T00:00.000000Z",
                        "end_date": null
                    },
                    "user":{
                        "id": 1,
                        "username": "atmouser",
                        "first_name": "atmo",
                        "last_name": "user",
                        "email": "atmouser@atmoemail.com",
                        "is_staff": false,
                        "is_superuser": false,
                        "date_joined": "1999-09-09T00:00.000000Z"
                    }
                },
                {
                    "id": 2,
                    "uuid": "zyxwv-utsrq-ponml-kjihg-fedcb-a",
                    "quota": {
                        "id": 1,
                        "cpu" 16,
                        "memory": 16,
                        "storage": 16,
                        "storage_count": 16,
                        "suspended_count": 16
                    },
                    "allocation": {
                        "id": 1,
                        "threshold": 10080,
                        "delta": 10080
                    },
                    "provider": {
                        "id": 2,
                        "uuid": "zyxwv-utsrq-ponml-kjihg-fedcb-a",
                        "name": "iPlant Workshop Cloud - Tucson",
                        "description": "<No Description Provided>",
                        "public": true,
                        "active": true,
                        "start_date": "1999-09-09T00:00.000000Z",
                        "end_date": null
                    },
                    "user":{
                        "id": 2,
                        "username": "atmouser2",
                        "first_name": "atmo",
                        "last_name": "user2",
                        "email": "atmouser2@atmoemail.com",
                        "is_staff": false,
                        "is_superuser": false,
                        "date_joined": "1999-09-09T00:00.000000Z"
                    }
                }
            ]
            }
            
### List all Identities [GET]
+ Response 200 (application/json)

    [Identity Collection][]

# Group Images
Images are snapshots of an instance at some point in time, including all programs and files.  They can be used to create
 a clone of an instance for others to use, or simply to save the state of an instance as a backup or recovery.

## Image [/images/{id}]
A single Image object.

Each Image has the following properties:

- **id**: id of the image
- **uuid**: unique id of image
- **name**: name of image
- **description**: description of image
- **icon**: (optional) if a custom display icon has been uploaded for this image, this field will contain the relative
 path to that image (e.g. "/images/icon.png")
- **created_by**: id of user who created the image
- **tags**: image tags
- **start_date**: the date the image was created
- **end_date**: Atmosphere implements soft deletes for everything (or nearly everything).  Any images with an
 end_date before the moment the request was made will be filtered out of the result set.  however, end_dates can also be
 used to schedule resources deletion by setting them at a future date.  This can also be used to give someone access to
 a resource for a limited time (such as for a workshop session).
- **provider_images**:


+ Parameters
    + id (required, `1`) ... integer id of the Image.
    
+ Model (application/json)

    JSON representation of Image Resource.

    + Body

            {
                "id": 1,
                "uuid": "bdc31c14-f807-11e3-8ef5-b2227cce2b54",
                "name": "Ubuntu 12.04 Updated NoGUI v1",
                "description": "Descriptiong for Ubuntu 12.04 Updated NoGUI v1",
                "icon": null,
                "created_by": 1,
                "tags": [
                    "Ubuntu",
                    "Featured"
                ],
                "start_date": "2014-02-05T01:03:27.903Z",
                "end_date": null,
                "private": false,
                "provider_images": "?"
            }

### Retrieve a Single Image [GET]
+ Response 200 (application/json)

    [Image][]
    
### Edit an Image [PATCH]
+ Response 200 (application/json)

    [Image][]

## Image Collection [/images{?page,page_size}]
Collection of all Images.

This is both a public and private endpoint.  If accessed without being authenticated you will get a list of all public
 images.  If authenticated, you will also get any private images you have permission to use.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of the Images Collection.

    + Body


        {
            "count": 752,
            "next": "https://atmobeta.iplantc.org/api/v2/images?page=2",
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "bdc31c14-f807-11e3-8ef5-b2227cce2b54",
                    "name": "Ubuntu 12.04 Updated NoGUI v1",
                    "description": "Description for Ubuntu 12.04 Updated NoGUI v1",
                    "icon": null,
                    "created_by": 1,
                    "tags": [
                        "Ubuntu",
                        "Featured"
                    ],
                    "start_date": "2014-02-05T01:03:27.903Z",
                    "end_date": null,
                    "private": false,
                    "provider_images": "?"
                },
                {
                    "id": 2,
                    "uuid": "bdc31c14-f807-11e3-8ef5-b2227cce2b55",
                    "name": "Ubuntu 12.04 Updated NoGUI v2",
                    "description": "Description for Ubuntu 12.04 Updated NoGUI v2",
                    "icon": null,
                    "created_by": 2,
                    "tags": [
                        "Ubuntu",
                        "Featured"
                    ],
                    "start_date": "2014-02-05T01:03:27.903Z",
                    "end_date": null,
                    "private": false,
                    "provider_images": "?"
                }
            ]
        }

### List all Images [GET]

+ Response 200 (application/json)

    [Image Collection][]

# Image Bookmarks
Image Bookmarks go here

## Image Bookmark [/image_bookmarks/{id}]
A single Image Bookmark object.

Each Image Bookmark has the following properties:

- **id**: id for the bookmark
- **uuid**: unique universal identifier for bookmark


+ Parameters
    + id (required, number, '1') ... Number `id` of the Provider.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "uuid": 1
            }


### Retrieve an Image Bookmark [GET]
+ Response 200 (application/json)

    [Image Bookmark][]

## Image Bookmark Collection [/image_bookmarks]
Collection of all Image Bookmarks.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of Image Bookmark Resource.

    + Body

            "count": 2,
            "next": null,
            "previous": null,
            "results": [
              {
                  "id": 1,
                  "uuid": 1
              },
              {
                  "id": 2,
                  "uuid": 2
              }
            ]

### List all Image Bookmarks [GET]
+ Response 200 (application/json)

    [Image Bookmark Collection][]

# Image Tag
An image tag is a link between an image and a tag

## Image Tag [/image_tags/{id}]
A single Image Tag object.

Each Image Tag has the following properties:

- **id**: id for the image tag
- **image**: image with tag attached
- **tag**: tag attached to image


+ Parameters
    + id (required, number, '1') ... Number `id` of the Provider.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "image":{
                    "id": 1
                },
                "tag":{
                    "id": 1
                }
            }


### Retrieve an Image Tag [GET]
+ Response 200 (application/json)

    [Image Tag][]

## Image Tag Collection [/image_tags]
Collection of all Image Tags.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of Image Tag Collection Resource.

    + Body

            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "image":{
                        "id": 1
                    },
                    "tag":{
                        "id": 1
                    }
                },
                {
                    "id": 2,
                    "image":{
                        "id": 2
                    },
                    "tag":{
                        "id": 2
                    }
                }
            ]

### List all Image Tags [GET]
+ Response 200 (application/json)

    [Image Tag Collection][]

# Group Instances
Instances are virtual machines that users have created from an image (application).  When a user creates an instance
 it immediately starts deducting AU's from their account.

## Instance [/instances/{id}]
A single Instance object.

Each Instance has the following properties:

- **id**: id
- **name**: name of the instance
- **start_date**: the date the instance was created
- **created_by**: username for the person who created the instance
- **status**: the state the instance is in (active, suspended, shutoff, etc.)
- **tags**: instance specific tags (array of strings)
- **size**: the size of the instance (number of CPUs, RAM, and Disk Space)
- **provider**: the provider the instance is on
- **identity**: which account the instance deducts AU's from
- **image_version**: The specific version of an image the instance was created from
- **ip_address**: IP address you can use to connect to the machine.  Address that start with 196, 178, or 10 are private,
 all others are public.  Instances with an IP address of 0.0.0.0 have not been assigned an IP address yet.
- **has_shell**: true if a user can ssh into the instance
- **has_vnc**: true if a user can remote desktop into the instance
    
+ Parameters
    + id (required, string, '26f0795e-f80b-11e3-8ef5-b2227cce2b54') ... String `id` of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Resource.

    + Body

            {
                "id": "26f0795e-f80b-11e3-8ef5-b2227cce2b54",
                "name": "Ubuntu 13.04 w/Docker 0.9",
                "start_date": "2014-05-14T18:17:18Z",
                "created_by": "username",
                "status": "active",
                "tags": [{
                  "id": 5,
                  "name": "Ubuntu",
                  "description": "A description of Ubuntu"
                }]
                "size": {
                    "id": "1",
                    "name": "m1.tiny",
                    "cpu": 1,
                    "disk": 0,
                    "root": 1,
                    "mem": 512
                },
                "provider": {
                  "id": "1",
                  "name": "iPlant Tucson"
                },
                "identity": {
                    "id": 1,
                    "created_by": "username",
                    "provider_id": 1
                },
                "image_version": {
                  "id": "4a254940-f80b-11e3-8ef5-b2227cce2b54",
                  "Ubuntu 13.04 w/Docker 0.9"
                },
                "ip_address": "127.0.0.1",
                "has_shell": false,
                "has_vnc": false
            }

### Retrieve an Instance [GET]
Get a specific instance.

+ Response 200 (application/json)

    [Instance][]
    
### Terminate an Instance [DELETE]
Terminate an instance.

+ Response 200 (application/json)

    [Instance][]


## Instance Collection [/instances]
Collection of all Instances
    
+ Model (application/json)

    JSON representation of Instances Collection Resource.

    + Body

            [
                {
                    "id": "26f0795e-f80b-11e3-8ef5-b2227cce2b54",
                    "name": "Ubuntu 13.04 w/Docker 0.9",
                    "start_date": "2014-05-14T18:17:18Z",
                    "created_by": "username",
                    "status": "active",
                    "tags": [{
                      "id": 5,
                      "name": "Ubuntu",
                      "description": "A description of Ubuntu"
                    }]
                    "size": {
                        "id": "1",
                        "name": "m1.tiny",
                        "cpu": 1,
                        "disk": 0,
                        "root": 1,
                        "mem": 512
                    },
                    "provider": {
                      "id": "1",
                      "name": "iPlant Tucson"
                    },
                    "identity": {
                        "id": 1,
                        "created_by": "username",
                        "provider_id": 1
                    },
                    "image_version": {
                      "id": "4a254940-f80b-11e3-8ef5-b2227cce2b54",
                      "Ubuntu 13.04 w/Docker 0.9"
                    },
                    "ip_address": "127.0.0.1",
                    "has_shell": false,
                    "has_vnc": false
                }
            ]
    
### List all Instances [GET]
Get a list of your instances created under the specific provider/identity.

+ Response 200 (application/json)

    [Instance Collection][]
        
### Launch an Instance [POST]
Launch an instance of an image.  You must specify the following properties:

- **name**: the name of your instance
- **image_version_id**: the id of the image version version you want to launch
- **size_id**: the id of the size of the virtual machine you need
- **provider_id**: id of the provider that you want the instance launched on
- **identity_id**: id of the identity you want to use to launch the instance

+ Request (application/json)

        { 
            "name": "Instance Name",
            "image_version_id": "237f983e-f80d-11e3-8ef5-b2227cce2b54"
            "size_id": "1",
            "provider_id": "1"
            "identity_id": "1"
        }

+ Response 201 (application/json)

    [Instance][]

#Instance Tags
Instance Tags go here
#Platform Types
Platforms Types go here
# Group Projects
Projects are a way for users to group related resources.  Right now users can add Instances and Volumes to a group, but
 we also plan to support adding documents, hyperlinks, Images, and letting users control access to their
 Projects (i.e. adding users, removing users, and specifying permissions such as read-only access or modifying content)

## Project [/project/{id}]
A single Project object.

Each Project has the following properties:

- **id**: the id of the project
- **owner**: username of the person who created the project
- **image**: applications (images) in the project
- **instances**: instances in the project
- **volumes**: volumes in the project
- **name**: project name
- **description**: project description

+ Parameters
    + id (required, number, '1') ... Number `id` of the Project.
    
+ Model (application/json)

    JSON representation of Project Resource.

    + Body

            {
                "id": 1,
                "owner": "HanSolo",
                "name": "Project 1",
                "description": "This is my project description",
                "images": [],
                "instances": [
                    {
                        "alias": "26f0795e-f80b-11e3-8ef5-b2227cce2b54",
                        "alias_hash": "b30430ab304a637e0fac9a0322edf7a3",
                        "created_by": "username",
                        "status": "active",
                        "size_alias": "1",
                        "machine_alias": "4a254940-f80b-11e3-8ef5-b2227cce2b54",
                        "machine_name": "Ubuntu 13.04 w/Docker 0.9",
                        "machine_alias_hash": "3f8add823804dc73b221a6c8308a8ab2",
                        "ip_address": "127.0.0.1",
                        "start_date": "2014-05-14T18:17:18Z",
                        "token": null,
                        "has_shell": false,
                        "has_vnc": false,
                        "identity": {
                            "id": 1,
                            "created_by": "username",
                            "provider": 1
                        },
                        "name": "Ubuntu 13.04 w/Docker 0.9",
                        "tags": ["SpliceGrapher"],
                        "projects": [
                            1
                        ]
                    }
                ],
                "volumes": [
                    {
                        "alias": "132333c94-7864-4157-9cq-5441ff321F11",
                        "created_by": 1,
                        "name": "My_First_Volume",
                        "description": "",
                        "status": "available",
                        "size": 1,
                        "attach_data": {},
                        "provider": 1,
                        "identity": {
                            "id": 1,
                            "created_by": "HanSolo",
                            "provider": 1
                        },
                        "projects": [
                            1
                        ],
                        "start_date": "2014-05-13T00:24:58Z"
                    }
                ],
                "start_date": "2014-04-11T17:51:11.511Z",
                "end_date": null
            }

### Retrieve a Project [GET]
+ Response 200 (application/json)

    [Project][]
        
### Update a Project [PUT]
+ Request (application/json)

        {
          "description": "A new description for my project."
        }

+ Response 200 (application/json)

    [Project][]
    
### Delete a Project [DELETE]
Delete a Project.  Projects can only be deleted once all resources (instances and volumes) have been transferred out of
 it or deleted.  Attempting to delete a project with resources still inside will return a status code of 409 (conflict)

+ Response 200 (application/json)

    [Project][]

## Projects Collection [/project]
Collection of all Projects.

+ Model (application/json)

    JSON representation of Projects Collection Resource.

    + Body

            [
                {
                    "id": 1,
                    "owner": "HanSolo",
                    "name": "Project 1",
                    "description": "This is my project description",
                    "images": [],
                    "instances": [
                        {
                            "alias": "26f0795e-f80b-11e3-8ef5-b2227cce2b54",
                            "alias_hash": "b30430ab304a637e0fac9a0322edf7a3",
                            "created_by": "username",
                            "status": "active",
                            "size_alias": "1",
                            "machine_alias": "4a254940-f80b-11e3-8ef5-b2227cce2b54",
                            "machine_name": "Ubuntu 13.04 w/Docker 0.9",
                            "machine_alias_hash": "3f8add823804dc73b221a6c8308a8ab2",
                            "ip_address": "127.0.0.1",
                            "start_date": "2014-05-14T18:17:18Z",
                            "token": null,
                            "has_shell": false,
                            "has_vnc": false,
                            "identity": {
                                "id": 1,
                                "created_by": "username",
                                "provider": 1
                            },
                            "name": "Ubuntu 13.04 w/Docker 0.9",
                            "tags": ["SpliceGrapher"],
                            "projects": [
                                1
                            ]
                        }
                    ],
                    "volumes": [
                        {
                            "alias": "132333c94-7864-4157-9cq-5441ff321F11",
                            "created_by": 1,
                            "name": "My_First_Volume",
                            "description": "",
                            "status": "available",
                            "size": 1,
                            "attach_data": {},
                            "provider": 1,
                            "identity": {
                                "id": 1,
                                "created_by": "HanSolo",
                                "provider": 1
                            },
                            "projects": [
                                1
                            ],
                            "start_date": "2014-05-13T00:24:58Z"
                        }
                    ],
                    "start_date": "2014-04-11T17:51:11.511Z",
                    "end_date": null
                },
                {
                    "id": 2,
                    "owner": "HanSolo",
                    "name": "Project 2",
                    "description": "My second project.",
                    "images": [],
                    "instances": [],
                    "volumes": [],
                    "start_date": "2014-05-01T19:27:40.910Z",
                    "end_date": "2014-05-02T19:47:30.055Z"
                }
            ]

### List all Projects [GET]
+ Response 200 (application/json)

    [Projects Collection][]

### Create a Project [POST]
Create a Project.  You must specify the following properties:

- **name**: a name for the project
- **description**: a description of the project

+ Request (application/json)

        {
            "name": "My Awesome Project",
            "description": "A description of my awesome project."
        }

+ Response 201 (application/json)

    [Project][]

## Project Instances [/project/{id}/instance]
The Instances in the Project.

+ Parameters
    + id (required, number, '1') ... Number `id` of the Project.
    
### Retrieve a Project's Instances [GET]
+ Response 200 (application/json)

    [Instance Collection][]
    
## Project Instance [/project/{project_id}/instance/{instance_id}]
The endpoint to add or remove an Instance from a Project.

+ Parameters
    + project_id (required, number, '1') ... Number `id` of the Project.
    + instance_id (required, string, '26f0795e-f80b-11e3-8ef5-b2227cce2b54') ... Number `alias` of the Instance.
    
### Add Instance to Project [PUT]
+ Response 200 (application/json)

    [Instance][]
    
### Remove Instance from Project [DELETE]
+ Response 204 (application/json)
            
## Project Volumes [/project/{id}/volume]
The Volumes in the Project.

+ Parameters
    + id (required, number, '1') ... Number `id` of the Project.
    
### Retrieve a Project's Volumes [GET]
+ Response 200 (application/json)

    [Volume Collection][]
    
## Project Volume [/project/{project_id}/volume/{volume_id}]
The endpoint to add or remove a Volume from a Project.

+ Parameters
    + project_id (required, number, '1') ... Number `id` of the Project.
    + volume_id (required, string, '13138b97-786a-4e57-9acc-5d41cfd21f75') ... Number `alias` of the Volume.
    
### Add Volume to Project [PUT]
+ Response 200 (application/json)

    [Volume][]
    
### Remove Volume from Project [DELETE]
+ Response 204 (application/json)

# Group Project Instances -concept-
Stuff goes here?

# Group Project Volumes -concept-
Stuff goes here?

# Group Providers
Providers represent the different cloud providers managed by Atmosphere.

## Provider [/providers/{id}]
A single Provider object.

Each Provider has the following properties:

- **id**: unique id for the provider
- **name**: the display name for the provider
- **description**: a description of the provider


+ Parameters
    + id (required, number, '1') ... Number `id` of the Provider.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "name": "planetTatooine",
                "description": "planetTatooine"
            }              


### Retrieve a Provider [GET]
+ Response 200 (application/json)

    [Provider][]

## Provider Collection [/providers]
Collection of all Providers.

+ Model (application/json)

    JSON representation of Provider Collection Resource.

    + Body

            [
                {
                    "id": 1,
                    "name": "planetTatooine",
                    "description": "planetTatooine"
                },
                {
                    "id": 2,
                    "name": "stormCloud",
                    "description": "full of lightning"
                }
            ]
            
### List all Providers [GET]
+ Response 200 (application/json)

    [Provider Collection][]

#Provider Machines
Provider Machines go here
# Group Provider Sizes -???-
Sizes represent the different instance configurations offered by that cloud provider.  Each configuration includes the
 number of CPUs, memory, and disk space.  Sizes with fewer resources will consume AUs at a slower rate.

## Provider Size Collection [/provider/{providerId}/identity/{identityId}/size]
+ Parameters
    + providerId (required, number, '1') ... Number `id` of the Provider.
    + identityId (required, number, '1') ... Number `id` of the Identity.
    
### List all Provider Sizes [GET]
For a combination of provider and identity.

+ Response 200 (application/json)

        [
            {
                "occupancy": 0,
                "total": 1,
                "remaining": 1,
                "active": true,
                "alias": "1",
                "name": "m1.tiny",
                "provider": 1,
                "cpu": 1,
                "disk": 0,
                "root": 1,
                "mem": 512
            },
            {
                "occupancy": 0,
                "total": 1,
                "remaining": 1,
                "active": true,
                "alias": "2",
                "name": "m1.small",
                "provider": 1,
                "cpu": 1,
                "disk": 0,
                "root": 20,
                "mem": 2048
            },
            {
                "occupancy": 0,
                "total": 1,
                "remaining": 1,
                "active": true,
                "alias": "3",
                "name": "m1.medium",
                "provider": 1,
                "cpu": 2,
                "disk": 0,
                "root": 40,
                "mem": 4096
            }
        ]
        
## Provider Size [/provider/{providerId}/identity/{identityId}/size/{id}]
A single Size object (in the specified provider) with all its details.

+ Parameters
    + id (required, string, 'b24ce221-1ed4-4317-av7q-b4yf4q4qe3239') ... String `alias` of the Size.
    + providerId (required, number, '1') ... Number `id` of the Provider.
    + identityId (required, number, '1') ... Number `id` of the Identity.

### Retrieve a Size [GET]
+ Response 200 (application/json)

    + Body

            {
                "occupancy": 0,
                "total": 1,
                "remaining": 1,
                "active": true,
                "alias": "1",
                "name": "m1.tiny",
                "provider": 1,
                "cpu": 1,
                "disk": 0,
                "root": 1,
                "mem": 512
            }

#Provider Types
Provider Types go here
# Group Quota Requests
Quota requests are user requests for quota increases

## Quota Request [/quota_requests/{id}]
A single Quota Request object.

Each quota request has the following properties:

- **id**: the id of the request
- **created_by**: the name of the user who submitted the request
- **admin_message**: admin response to user request
- **quota**: quota to be granted to user
- **status**: current status of request
- **request**: the text field for user requests
- **description**: more thorough user description of request and reason

+ Parameters
    + id (required, number, `1`) ... Number `id` of the quota request.
    
+ Model (application/json)

    JSON representation of Quota Request Resource.

    + Body

            {
                "id": 1,
                "created_by": "User",
                "admin_message": "Approved",
                "quota": "1000 CPU",
                "status": "pending",
                "request": "I want 10,000 CPUs",
                "description": "Description of reason for request"
            }

### Retrieve a quota request [GET]
+ Response 200 (application/json)

    [Quota Request][]

### Update a Quota Request [PUT]
+ Request (application/json)

        {
          "quota": 1
        }

+ Response 200 (application/json)

    [Quota Request][]

## Quota Request Collection [/quota_requests{?page,page_size}]
Collection of all Quota Requests.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of Quota Request Collection Resource.

    + Body

            {
                "count": 10,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 1,
                        "created_by": "User",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "I want 10,000 CPUs",
                        "description": "Description of reason for request"
                    },
                    {
                        "id": 2,
                        "created_by": "Other_user",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "I want 10,000 CPUs",
                        "description": "Description of reason for request"
                    },
                    {
                        "id": 3,
                        "created_by": "Science_person",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "I want more everything",
                        "description": "I like everything"
                    },
                    {
                        "id": 4,
                        "created_by": "Tornado_Tom",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 5,
                        "created_by": "Ragin_Ricardo",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 6,
                        "created_by": "Salad_Sally",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "Default",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 7,
                        "created_by": "Zippy_Zardansen",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 8,
                        "created_by": "Flippin_Fernanda",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 9,
                        "created_by": "Chargin_Charlie",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    },
                    {
                        "id": 10,
                        "created_by": "Dancin_Dana",
                        "admin_message": "Default",
                        "quota": null,
                        "status": "pending",
                        "request": "Stuff",
                        "description": "Purposes"
                    }
                ]
            }

### List all Quota Requests [GET]
+ Response 200 (application/json)

    [Quota Request Collection][]

### Create a Quota Request [POST]
Create a Quota Request.  You must specify the following properties:

- **name**: a name for the tag
- **description**: a description of the tag

+ Request (application/json)

        {
            "name": "Tag name",
            "description": "A description of the tag."
        }

+ Response 201 (application/json)

    [Quota Request][]

# Group Tags
Tags are small labels users can apply to various resources and are primarily used to help focus searches.

## Tag [/tag/{id}]
A single Tag object.

Each Tag has the following properties:

- **id**: the id of the tag
- **name**: the name of the tag
- **description**: a description of what the tag means

+ Parameters
    + id (required, number, `1`) ... Number `id` of the Tag.
    
+ Model (application/json)

    JSON representation of Tag Resource.

    + Body

            {
                "id": 5,
                "name": "Ubuntu",
                "description": "A description of Ubuntu"
            }

### Retrieve a Tag [GET]
+ Response 200 (application/json)

    [Tag][]

## Tag Collection [/tag{?page,page_size}]
Collection of all Tags.

+ Parameters
    + page (string, optional) ... Page of results
    + page_size (string, optional) ... Number of results

+ Model (application/json)

    JSON representation of Tags Collection Resource.

    + Body

            {
                "count": 5,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 1,
                        "name": "SpliceGrapher",
                        "description": "A description of SpliceGrapher"
                    },
                    {
                        "id": 2,
                        "name": "xGDBvm",
                        "description": "A description of xGDBvm"
                    },
                    {
                        "id": 3,
                        "name": "R",
                        "description": "A description of R"
                    },
                    {
                        "id": 4,
                        "name": "Featured",
                        "description": "Featured applications receive priority ordering over non-featured applications"
                    },
                    {
                        "id": 5,
                        "name": "Ubuntu",
                        "description": "A description of Ubuntu"
                    }
                ]
            }

### List all Tags [GET]
+ Response 200 (application/json)

    [Tag Collection][]

### Create a Tag [POST]
Create a Tag.  You must specify the following properties:

- **name**: a name for the tag
- **description**: a description of the tag

+ Request (application/json)

        {
            "name": "Tag name",
            "description": "A description of the tag."
        }

+ Response 201 (application/json)

    [Tag][]

#Users
Users go here
# Group Volumes
Volumes are network based storage that a user can attach to any instance.  They can then be detached and attached to a
 different instance.

## Volume [/provider/{providerId}/identity/{identityId}/volume/{id}]
A single Volume object.

Each Volume has the following properties:

- **id**: unique id for the volume
- **created_by**: user id of the person who created the volume
- **name**: name of the volume
- **description**: description of the volume
- **status**: status of the volume (detaching, attaching, available or in-use)
- **size**: size of the volume in Gigabytes
- **attach_data**: if the volume is attached to an instance, provides details about which instance it's attached to and
 where the volume is mounted to on the instance
- **provider**: provider the volume is created on
- **identity**: identity that created the volume

+ Parameters
    + id (required, string, '13138b97-786a-4e57-9acc-5d41cfd21f75') ... String `alias` of the Volume.
    
+ Model (application/json)

    JSON representation of Volume Resource.

    + Body

            {
                "id": "232333c94-7864-4157-9cq-5441ff321F11",
                "name": "My_Other_Volume",
                "created_by": 1,
                "description": "",
                "status": "available",
                "size": 1,
                "attach_data": {},
                "provider": {
                  "id": "1",
                  "name": "iPlant Tucson"
                },
                "identity": {
                    "id": 1,
                    "created_by": "username",
                    "provider_id": 1
                },
                "start_date": "2014-05-13T00:24:58Z"
            }

### Retrieve a Volume [GET]
+ Response 200 (application/json)

    [Volume][]
    
### Destroy a Volume [DELETE]
Destroy a volume.

+ Response 200 (application/json)

    [Volume][]

## Volume Collection [/volumes]
Collection of all Volumes.
    
+ Model (application/json)

    JSON representation of Volumes Collection Resource.

    + Body

            [
                {
                    "id": "232333c94-7864-4157-9cq-5441ff321F11",
                    "name": "My_Other_Volume",
                    "created_by": 1,
                    "description": "",
                    "status": "available",
                    "size": 1,
                    "attach_data": {
                        "instance_id": "bac30113-423d-44bd-8d7a-41136e9ers34",
                        "device": "/dev/vdc"
                    },
                    "provider": {
                      "id": "1",
                      "name": "iPlant Tucson"
                    },
                    "identity": {
                        "id": 1,
                        "created_by": "username",
                        "provider_id": 1
                    },
                    "start_date": "2014-05-13T00:24:58Z"
                }
            ]
    
### List all Volumes [GET]
+ Response 200 (application/json)

    [Volume Collection][]

### Create a Volume [POST]
Create a volume.  You must specify the following properties:

- **name**: the name of the volume
- **size**: the size of the volume in Gigabytes
- **description**: a description of the volume

+ Request (application/json)

        {
            "name": "New Volume",
            "size": 1,
            "description": "Description of new volume"
        }

+ Response 201 (application/json)

    [Volume][]
