FORMAT: 1A
HOST: https://atmobeta.iplantc.org/api/v2

# Atmosphere
Atmosphere is a private, self-service cloud computing platform that supports research efforts in the plant sciences
community.  It addresses the growing need for customized computational resources and provides the community with
access to:
  
  1. Infrastructure as a Service (IaaS), accessible through a web portal or by API
  2. Platform as a Service (PaaS), for developing and deploying software to the scientific community
  3. Software as a Service (SaaS), with preconfigured, frequently used analysis routines, algorithms, and
  datasets designed to accommodate computationally and data-intensive bioinformatics tasks.

<span style="color:orange;">NOTE: These API docs are currently IN DEVELOPMENT.</span>
 
## Useful Links

   - [Atmosphere Homepage](http://www.iplantcollaborative.org/ci/atmosphere)
   - [Atmosphere on GitHub](https://github.com/iPlantCollaborativeOpenSource/atmosphere)

## Pagination
All collections that support pagination will return a paginated list.  The collections that do not support pagination
 will not return a paginated list (all results that exist will be returned).  Since Atmosphere uses Django Rest Framework
 as the API framework, it is reasonable to allow whatever is most natural to implement in that framework to flavor the
 language of the API.  To that end, the following query parameters control pagination:

   - **page**: the page of results to return
   - **page_size**: the number of results per page

## Authorization
Except where explicitly stated (images, tags) all endpoints require authorization.  This is achieved by obtaining an
 access token and placing the token in the Authorization Header like so:

    Authorization: TOKEN [access_token]

# Group Allocation
Allocations represent Atmosphere AU values.
**NOTE: Allocations are visible to Staff and CloudAdministrators ONLY**

## Allocation [/allocations/{id}]
A single Allocation object.

Each Allocation has the following properties:

- **id**: unique id for the allocation
- **threshold**: amount of CPU minutes allocated

+ Parameters
    + id (required, number) ... `id` of the Allocation.

+ Model(application/json)

    JSON representation of Allocation Resource

    + Body

            {
                "id": 1,
                "threshold": 10080
            }


### Retrieve an Allocation [GET]
+ Response 200 (application/json)

    [Allocation][]

## Allocation Collection [/allocations]
Collection of all Providers.

+ Model (application/json)

    JSON representation of Allocation Collection Resource.

    + Body
        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "threshold": 10080
                },
                {
                    "id": 2,
                    "threshold": 20160
                }
            ]
        }

### List all Allocations [GET]
+ Response 200 (application/json)

    [Allocation Collection][]

# Group Boot Scripts
Boot Scripts are used to launch a custom program, script, or daemon after your instance has been deployed. Boot Scripts can be added to an image, where they will be required for all future launches. They can also be added to an instance as part of the launch process. Boot Scripts can include all of the text required to 'write' the script in a copy-and-paste format, or you can provide a URL to allow for future changes after the script has been created.
 Future plans for boot script include: a more defined concept of 'public/private' for boot scripts.

## Boot Script [/boot_scripts/{id}]
A single Boot Script object.

Each Boot Script has the following properties:

- **id**: the id of the boot_script *(DEPRECATED)*
- **uuid**: the uuid of the boot_script
- **url**: the URL of the boot_script
- **title**: the title of the boot_script
- **text**: the contents of the boot_script
- **type**: the type of the boot_script *(Raw Text or URL ONLY)*
- **created_by**: user who created the boot_script

+ Parameters
    + uuid (number, required) ... uuid of the Boot Script.
    
+ Model (application/json)

    JSON representation of Boot Script Resource.

    + Body
    
        {
            "id": 1,
            "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
            "url": "https://atmobeta.iplantc.org/api/v2/boot_scripts/3f048788-258e-4819-be88-9271553cc2ce",
            "created_by": "example_user",
            "title": "Sample boot_script",
            "text": "#!/usr/bin/env python\nprint 'Hello World'",
            "type": "Raw Text"
        }

### Retrieve a Boot Script [GET]
+ Response 200 (application/json)

    [Boot Script][]
        
### Update a Boot Script [PATCH]
You can update the following properties for boot_scripts you own:
- **title**: the title of the boot_script
- **text**: the contents of the boot_script
- **type**: the type of the boot_script (Raw Text or URL *ONLY*)

+ Request (application/json)
  
        {
            "title": "Updated boot_script",
            "text": "https://atmobeta.iplantc.org/init_files/boot_scripts/hello_world.py",
            "type": "URL"
        }

+ Response 200 (application/json)

    [Boot Script][]
    
### Delete a Boot Script [DELETE]
Delete a Boot Script.  Boot Scripts can only be deleted if you were the one who created it. Deleteing a Boot Script will stop the
 boot script from being executed on any instances that have selected it again.

+ Response 200 (application/json)

    [Boot Script][]


## Boot Scripts Collection [/boot_scripts]
Collection of all Boot Scripts.

+ Model (application/json)

    JSON representation of Boot Scripts Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results":
            [
                {
                    "id": 1,
                    "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
                    "url": "https://atmobeta.iplantc.org/api/v2/boot_scripts/3f048788-258e-4819-be88-9271553cc2ce",
                    "created_by": "example_user",
                    "title": "Sample boot_script",
                    "text": "#!/usr/bin/env python\nprint 'Hello World'",
                    "type": "Raw Text"
                }
            ]
        }


### List all Boot Scripts [GET]
+ Response 200 (application/json)

    [Boot Scripts Collection][]

### Create a Boot Script [POST]
Create a Boot Script.  You must specify the following properties:
- **title**: the title of the boot_script
- **text**: the contents of the boot_script
- **type**: the type of the boot_script (Raw Text or URL *ONLY*)

+ Request (application/json)

        {
            "created_by": "example_user",
            "title": "Sample boot_script",
            "text": "#!/usr/bin/env python\nprint 'Hello World'",
            "type": "Raw Text"
        }

+ Response 201 (application/json)
  [Boot Script][]

# Group Credentials
Credentials are the identifying information relared to your account. Using credentials you can connect to the Cloud Provider externally.
 Future support will allow users to bring their own credentials and modify those credentials that they have brought.
 Sharing Credentials is accomplished by creating a new identity and sharing that identity with the group(s) that require access.
 Be careful when sharing access to your own Credentials!

## Credential [/credentials/{id}]
A single Credential object.

Each Credential has the following properties:

- **id**: the id of the credential *(DEPRECATED)*
- **uuid**: the uuid of the credential
- **url**: the URL of the credential
- **identity**: The identity that 'owns' the credential
- **key**: the key-name of the credential
- **value**: the value of the credential

+ Parameters
    + uuid (number, required) ... uuid of the Credential.
    
+ Model (application/json)

    JSON representation of Credential Resource.

    + Body
    
        {
            "id": 1,
            "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
            "url": "https://atmobeta.iplantc.org/api/v2/credentials/3f048788-258e-4819-be88-9271553cc2ce",
            "identity": {
                "id": "1",
                "uuid": "4bb68750-ecdb-41b6-974b-6b1771c9ea77",
                "url": "https://atmobeta.iplantc.org/api/v2/identities/4bb68750-ecdb-41b6-974b-6b1771c9ea77",
                "provider": 1
            },
            "key": "ex_tenant_name",
            "value": "example_user"
        }

### Retrieve a Credential [GET]
+ Response 200 (application/json)

    [Credential][]
        
### Update a Credential [PATCH]
You can update the following properties for credentials you own *( Future Feature)*:
- **key**: the key-name of the credential
- **value**: the value of the credential

+ Request (application/json)
  
        {
            "key": "ex_project_name",
            "value": "example_project"
        }

+ Response 200 (application/json)

    [Credential][]
    
### Delete a Credential [DELETE]
Delete a Credential.  Credentials can only be deleted if you were the one who created it. Deleteing a Credential will stop any
 connected identities from being able to connect to the cloud. *( Future Feature)*

+ Response 200 (application/json)

    [Credential][]


## Credentials Collection [/credentials]
Collection of all Credentials.

+ Model (application/json)

    JSON representation of Credentials Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results":
            [
                {
                    "id": 1,
                    "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
                    "url": "https://atmobeta.iplantc.org/api/v2/credentials/3f048788-258e-4819-be88-9271553cc2ce",
                    "identity": {
                        "id": "1",
                        "uuid": "4bb68750-ecdb-41b6-974b-6b1771c9ea77",
                        "url": "https://atmobeta.iplantc.org/api/v2/identities/4bb68750-ecdb-41b6-974b-6b1771c9ea77",
                        "provider": 1
                    },
                    "key": "ex_tenant_name",
                    "value": "example_user"
                }
            ]
        }


### List all Credentials [GET]
+ Response 200 (application/json)

    [Credentials Collection][]

### Create a Credential [POST]
Create a Credential.  You must specify the following properties *(Future Feature)*:
- **identity**: The identity that 'owns' the credential
- **key**: the key-name of the credential
- **value**: the value of the credential

+ Request (application/json)

        {
            "identity": "4bb68750-ecdb-41b6-974b-6b1771c9ea77",
            "key": "key",
            "value": "username"
        }

+ Response 201 (application/json)
  [Credential][]

# Group Email Feedback
To Email Feedback you can use this RESTful endpoint. This endpoint only accepts POST requests, and provides no additional functionality.


## Email Feedback Collection [/email_feedback]
This endpoint accepts POST requests ONLY. There is no 'GET' feedback for email_feedback.

+ Model (application/json)

    JSON representation of Email Feedback Collection Resource.

    + Body

        {
            "detail": "Method \"GET\" not allowed.",
        }


### List all Email Feedback [GET]
+ Response 405 (application/json)

    [Email Feedback Collection][]

### Create a Feedback Email [POST]
Create a Feedback Email.  You must specify the following properties *(Future Feature)*:
- **subject**: The subject of the feedback email.
- **message**: The message of the feedback email.
- **user-interface**: The UI that the feedback email was sent from (Airport, Troposphere).

+ Request (application/json)

        {
            "subject": "This is the Subject of the Email",
            "message": "This is the full-body of the E-mail that will be sent.",
            "user-interface": "Troposphere"
        }

+ Response 201 (application/json)

        {}
  [Email Feedback][]

# Group Email Resource Request
To Email Resource Request you can use this RESTful endpoint. This endpoint only accepts POST requests, and provides no additional functionality.


## Email Resource Request Collection [/email_request_resources]
This endpoint accepts POST requests ONLY. There is no 'GET' request_resources for email_request_resources.

+ Model (application/json)

    JSON representation of Email Resource Request Collection Resource.

    + Body

        {
            "detail": "Method \"GET\" not allowed.",
        }


### List all Email Resource Request [GET]
+ Response 405 (application/json)

    [Email Resource Request Collection][]

### Create a Resource Request Email [POST]
Create a Resource Request Email.  You must specify the following properties *(Future Feature)*:
- **quota**: The quota requested in the request_resources email.
- **reason**: The reason for making the request_resources email.

+ Request (application/json)

        {
            "quota": "I would like 16 CPU and 64 GB RAM",
            "reason": "This is required by R to do gene sequencing.",
        }

+ Response 201 (application/json)

        {}
  [Email Resource Request][]

# Group Email Support
To Email Support you can use this RESTful endpoint. This endpoint only accepts POST requests, and provides no additional functionality.


## Email Support Collection [/email_support]
This endpoint accepts POST requests ONLY. There is no 'GET' support for email_support.

+ Model (application/json)

    JSON representation of Email Support Collection Resource.

    + Body

        {
            "detail": "Method \"GET\" not allowed.",
        }


### List all Email Support [GET]
+ Response 405 (application/json)

    [Email Support Collection][]

### Create a Support Email [POST]
Create a Support Email.  You must specify the following properties *(Future Feature)*:
- **subject**: The subject of the feedback email.
- **message**: The message of the feedback email.
- **user-interface**: The UI that the feedback email was sent from (Airport, Troposphere).

+ Request (application/json)

        {
            "subject": "This is the Subject of the Email",
            "message": "This is the full-body of the E-mail that will be sent.",
            "user-interface": "Troposphere"
        }

+ Response 201 (application/json)

        {}
  [Email Support][]

# Group Group
Every User is assigned to a Group of their own name initially. This 'usergroup' is then in charge of all the identities, providers, instances, and applications which can be shared among other, larger groups, but can still be tracked back to the original user who made the API request.

## Group [/group/{groupname}]
A single Group object.

Each Group has the following properties:

- **id**: id of the user
- **url**: url of the user
- **name**: name of the group
- **users**: list of users that are included in the group

+ Parameters
    + groupname (required, number, `nameOfGroup`) ... String `nameOfGroup` Retrieve details about a specific group.

+ Model (application/json)

    JSON representation of Group Resource.

    + Body

             {
                "id": 1,
                "url": "https://atmobeta.iplantc.org/api/v2/groups/21e5963b-d968-4dff-bcdc-054c75ce903c",
                "name": "example_group",
                "users": [
                    {
                        "id": 1,
                        "uuid": "333fe333-7c12-45a8-b15f-e75a75963d64",
                        "url": "https://atmobeta.iplantc.org/api/v2/users/333fe333-7c12-45a8-b15f-e75a75963d64",
                        "username": "example_user"
                    }
                ]
             }

### Retrieve a Single Group [GET]
+ Response 200 (application/json)

    [Group][]

## Groups Collection [/group]
Collection of all Groups

+ Model (application/json)

    JSON representation of Group Collection Resource

    + Body

            [
                {
                    "id": 1,
                    "url": "https://atmobeta.iplantc.org/api/v2/groups/21e5963b-d968-4dff-bcdc-054c75ce903c",
                    "name": "example_group",
                    "users": [
                        {
                            "id": 1,
                            "uuid": "333fe333-7c12-45a8-b15f-e75a75963d64",
                            "url": "https://atmobeta.iplantc.org/api/v2/users/333fe333-7c12-45a8-b15f-e75a75963d64",
                            "username": "example_user"
                        }
                    ]
                }
            ]

### List all Groups [GET]
+ Response 200 (application/json)
    [Groups Collection][]

# Group Identities
Identities are like user account information. A user has at least one identity per provider, and each identity
 contains information about how many resources can be consumed on that provider.  If a user has multiple identities
 under a single provider, it means they can allocate more resources by using a different identity.

## Identity [/identities/{id}]
A single Identity object.

Each Identity has the following properties:

- **id**: id of the identity
- **uuid**: uuid for the identity
- **quota**: quota assigned to the identity
- **allocation**: allocation assigned to the identity
- **usage**: current allocation usage for the identity
- **provider**: provider the identity is for
- **user**: user this identity belongs to

+ Parameters
    + id (required, number) ... `id` of the Identity.
    
+ Model (application/json)

    JSON representation of Identity Resource.

    + Body

            {
                "id": 1,
                "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1"
                "quota": {
                    "id": 1,
                },
                "allocation": {
                    "id": 1
                },
                "usage": {
                    "threshold": 168,
                    "current": 112,
                    "remaining": 46,
                    "ttz": "2015-09-01T10:10:10.100Z"
                },
                "provider": {
                    "id": 1,
                    "uuid": "c9b2829c-da3f-11e4-9e60-7780dea86e3f"
                },
                "user":{
                    "id": 1
                }
            }

### Retrieve an Identity [GET]

+ Response 200 (application/json)

    [Identity][]
    
## Identity Collection [/identities]
Collection of all Identities.

+ Model (application/json)

    JSON representation of Identity Collection Resource.

    + Body

            {
            "count": 2,
            "next": null,
            "prev": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "quota": {
                        "id": 1
                    },
                    "allocation": {
                        "id": 1
                    },
                    "usage": {
                        "threshold": 168,
                        "current": 112,
                        "remaining": 46,
                        "ttz": "2015-09-01T10:10:10.100Z"
                    },
                    "provider": {
                        "id": 1,
                        "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1"
                    },
                    "user":{
                        "id": 1
                    }
                },
                {
                    "id": 2,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec2",
                    "quota": {
                        "id": 1
                    },
                    "allocation": {
                        "id": 1
                    },
                    "usage": {
                        "threshold": 168,
                        "current": 112,
                        "remaining": 46,
                        "ttz": "2015-09-01T10:10:10.100Z"
                    },
                    "provider": {
                        "id": 2,
                        "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec2"
                    },
                    "user":{
                        "id": 2
                    }
                }
            ]
            }
            
### List all Identities [GET]
+ Response 200 (application/json)

    [Identity Collection][]

# Group Images
Images are snapshots of an instance at some point in time, including all programs and files.  They can be used to create
 a clone of an instance for others to use, or simply to save the state of an instance as a backup or recovery.

## Image [/images/{id}]
A single Image object.

Each Image has the following properties:

- **id**: id of the image
- **uuid**: unique id of image
- **name**: name of image
- **created_by**: id of user who created the image
- **description**: description of image
- **end_date**: Atmosphere implements soft deletes for everything (or nearly everything).  Any images with an
 end_date before the moment the request was made will be filtered out of the result set.  however, end_dates can also be
 used to schedule resources deletion by setting them at a future date.  This can also be used to give someone access to
 a resource for a limited time (such as for a workshop session).
- **is_public**: true if the image is publicly visible, false if it is private
- **icon**: (optional) if a custom display icon has been uploaded for this image, this field will contain the relative
 path to that image (e.g. "/images/icon.png")
- **start_date**: the date the image was created
- **tags**: image tags
- **versions**: list of different versions of the image


+ Parameters
    + id (required, number) ... id of the Image.
    
+ Model (application/json)

    JSON representation of Image Resource.

    + Body

        {
            "id": 1,
            "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
            "name": "name",
            "created_by": {
                "id": 1
            },
            "description": "description",
            "end_date": null,
            "is_public": true,
            "icon": null, 
            "start_date": "2015-03-30T18:30:45.501948Z",
            "tags": [
                {
                    "id": 1
                },
                {
                    "id": 2
                }
            ],
            "versions": [
                {
                    "id": 1
                }
            ]
        }

### Retrieve a Single Image [GET]
+ Response 200 (application/json)

    [Image][]
    
### Edit an Image [PATCH]
Images can only be edited by the user who created it.

+ Request (application/json)
    + Body
        {
            "name": "new name",
            "description": "new description",
        }
        
+ Response 200 (application/json)

    [Image][]

## Image Collection [/images{?created_by__username,tags__name,search}]
Collection of all Images.

This is both a public and private endpoint.  If accessed without being authenticated you will get a list of all public
 images.  If authenticated, you will also get any private images you have permission to use.

+ Model (application/json)

    JSON representation of the Images Collection.

    + Body

        {
            "count": 1,
            "next": "null",
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "name": "name",
                    "created_by": {
                        "id": 1
                    },
                    "description": "description",
                    "end_date": null,
                    "is_public": true,
                    "icon": null, 
                    "start_date": "2015-03-30T18:30:45.501948Z",
                    "tags": [
                        {
                            "id": 1
                        },
                        {
                            "id": 2
                        }
                    ],
                    "versions": [
                        {
                            "id": 1
                        }
                    ]
                }
            ]
        }


### List all Images [GET]

+ Parameters
    + created_by__username (string, optional) ... return images created by user with `username`
    + tags__name (string, optional) ... return images with a tag of this `name`
    + search (string, optional) ... return images whose name, description, or tag name or description match the search criteria

+ Response 200 (application/json)

    [Image Collection][]

# Group Image Versions
Image versions are specific versions of images

## Image Version [/image_versions/{id}]
A single Image Version object.

Each Image Version has the following properties:

- **id**: uuid of the image version
- **parent**: parent version that the current version iterated on
- **name**: version name
- **change_log**: String containing description of changes in this version
- **image**: image this version belongs to
- **machines**: provider machines that this version exists on
- **allow_imaging**: true if this version can be imaged
- **licenses**: software licenses required by the image version
- **membership**: membership group this version belongs to
- **scripts**: boot scripts required for the image version
- **user**: user who created this version image
- **identity**: identity of the user who created this version image
- **start_date**: date this version was created
- **end_date**: date the version was deleted or will be deleted


+ Parameters
    + id (required, number) ... id of the Image.
    
+ Model (application/json)

    JSON representation of Image Resource.

    + Body

        {
            "id": "dc897bda-5007-11e5-a49e-3c15c2ddd686",
            "parent": {
                "id": "05565e66-5008-11e5-9bcd-3c15c2ddd686" 
            },
            "name": "1.0",
            "change_log": "21-August-2015 Updated something",
            "image": {
                "id": 1
            },
            "machines": [
                {
                    "id": 1
                }
            ],
            "allow_imaging": true,
            "licenses": [],
            "membership": [],
            "scripts": [],
            "user": {
                "id": 1
            },
            "identity": {
                "id": 1
            },
            "start_date": "2015-10-11T10:50:50.123456Z",
            "end_date": null
        }

### Retrieve a Single Image Version [GET]
+ Response 200 (application/json)

    [Image Version][]
    
### Edit an Image Version [PATCH]
Edit an image version

+ Request (application/json)
    + Body
        {
            "name": "new name"
        }
        
+ Response 200 (application/json)

    [Image Version][]

## Image Version Collection [/image_versions]
Collection of all Image Versions.

This is both a public and private endpoint.  If accessed without being authenticated you will get a list of all public
 image versions.  If authenticated, you will also get any private image versions you have permission to use.

+ Model (application/json)

    JSON representation of the Images Collection.

    + Body

        {
            "count": 1,
            "next": "null",
            "previous": null,
            "results": [
                {
                    "id": "dc897bda-5007-11e5-a49e-3c15c2ddd686",
                    "parent": {
                        "id": "05565e66-5008-11e5-9bcd-3c15c2ddd686" 
                    },
                    "name": "1.0",
                    "change_log": "21-August-2015 Updated something",
                    "image": {
                        "id": 1
                    },
                    "machines": [
                        {
                            "id": 1
                        }
                    ],
                    "allow_imaging": true,
                    "licenses": [],
                    "membership": [],
                    "scripts": [],
                    "user": {
                        "id": 1
                    },
                    "identity": {
                        "id": 1
                    },
                    "start_date": "2015-10-11T10:50:50.123456Z",
                    "end_date": null
                }
            ]
        }


### List all Image Versions [GET]

+ Response 200 (application/json)

    [Image Version Collection][]

# Group Image Version Boot Scripts

## Image Version Boot Script [/image_version_boot_scripts/{id}]
Get a single image version boot script

Each image version boot script has the following properties

- **id**: the id of the image_version_boot_script pairing
- **image_version**: image version the boot script is associated with
- **boot_script** boot script that is associated with the image version

+ Parameters
  + id (number, required) ... 'id' of the image version boot script.

+ Model (application/json)

    JSON representation of image version Resource

    + Body
    
        {
            "id": 156,
            "url": "https://atmobeta.iplantc.org/api/v2/image_version_boot_scripts/156",
            "image_version": {
                "id": "d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                "url": "https://atmobeta.iplantc.org/api/v2/image_versions/d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                "name": "1.0"
            },
            "boot_script": {
                "id": 1,
                "url": "https://atmobeta.iplantc.org/api/v2/boot_scripts/3f048788-258e-4819-be88-9271553cc2ce",
                "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
                "title": "Testing",
                "type": "Raw Text"
            }
        }

### Retrieve a single Image Version Boot Script [GET]

+ Response 200 (application/json)

    [Image Version Boot Script][]

### Remove Boot Script from Image Version [DELETE]

  + Response 204 (application/json)

## Image Version Boot Script Collection [/image_version_boot_scripts{?version_id}]

+ Parameters
  + version_id (number, optional) ... 'id' of image version to filter by

+ Model (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 156,
                    "url": "https://atmobeta.iplantc.org/api/v2/image_version_boot_scripts/156",
                    "image_version": {
                        "id": "d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                        "url": "https://atmobeta.iplantc.org/api/v2/image_versions/d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                        "name": "1.0"
                    },
                    "boot_script": {
                        "id": 1,
                        "url": "https://atmobeta.iplantc.org/api/v2/boot_scripts/3f048788-258e-4819-be88-9271553cc2ce",
                        "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
                        "title": "Testing",
                        "type": "Raw Text"
                    }
                }
            ]
        }

### List all Image Version Boot Scripts [GET]

+ Response 200(application/json)

    [Image Version Boot Script Collection][]


### Add Boot Script to Image Version [POST]
Add an boot script to a image version. You must specify the following properties:
- **image_version**: image version uuid
- **boot_script**: boot script uuid

+ Request (application/json)

        {
            "image_version": "d4f30fb0-3b08-40fa-9075-e022b6cbd050",
            "boot_script": "3f048788-258e-4819-be88-9271553cc2ce"
        }

+ Response 200 (application/json)

    [Image Version Boot Script][]

# Group Image Version Licenses

## Image Version License [/image_version_licenses/{id}]
Get a single Image Version License

Each Image Version License has the following properties

- **id**: the id of the image_version_license pairing
- **image_version**: Image Version the license is associated with
- **license** license that is associated with the Image Version

+ Parameters
  + id (number, required) ... 'id' of the Image Version license.

+ Model (application/json)

    JSON representation of Image Version Resource

    + Body
    
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/image_version_licenses/1",
            "image_version": {
                "id": "0005099e-bdbd-4964-9c81-e1a5a4788fc6",
                "url": "https://atmobeta.iplantc.org/api/v2/image_versions/0005099e-bdbd-4964-9c81-e1a5a4788fc6",
                "name": "1.0"
            },
            "license": {
                "id": 1,
                "url": "https://atmobeta.iplantc.org/api/v2/licenses/d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6",
                "uuid": "d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6",
                "title": "Testing",
                "type": "Full Text",
                "text": "Testing the update method"
            }
        }

### Retrieve a single Image Version License [GET]

+ Response 200 (application/json)

    [Image Version License][]

### Remove License from Image Version [DELETE]

  + Response 204 (application/json)

## Image Version License Collection [/image_version_licenses{?version_id}]

+ Parameters
  + version_id (number, optional) ... 'id' of Image Version to filter by

+ Model (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "image_version": {
                        "id": 1
                    },
                    "license": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    }
                }
            ]
        }

### List all Image Version Licenses [GET]

+ Response 200(application/json)

    [Image Version License Collection][]


### Add license to Image Version [POST]
Add an license to a Image Version. You must specify the following properties:
- **image_version**: Image Version id
- **license**: license id

+ Request (application/json)

        {
            "image_version": "0005099e-bdbd-4964-9c81-e1a5a4788fc6",
            "license": "d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6"
        }

+ Response 200 (application/json)

    [Image Version License][]

# Group Image Version Memberships

## Image Version Membership [/image_version_memberships/{id}]
Get a single Image Version Membership

Each Image Version Membership has the following properties

- **id**: the id of the image_version_membership pairing
- **image_version**: Image Version the membership is associated with
- **membership** membership that is associated with the Image Version

+ Parameters
  + id (number, required) ... 'id' of the Image Version membership.

+ Model (application/json)

    JSON representation of Image Version Resource

    + Body
    
        {
            "id": 156,
            "url": "https://atmobeta.iplantc.org/api/v2/image_version_memberships/156",
            "image_version": {
                "id": "d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                "url": "https://atmobeta.iplantc.org/api/v2/image_versions/d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                "name": "1.0"
            },
            "group": {
                "id": 598,
                "uuid": "6139dc6d-0a50-4a83-9e6d-edf4b8e5d611",
                "url": "https://atmobeta.iplantc.org/api/v2/groups/6139dc6d-0a50-4a83-9e6d-edf4b8e5d611",
                "name": "estevetest03"
            }
        }

### Retrieve a single Image Version membership [GET]

+ Response 200 (application/json)

    [Image Version Membership][]

### Remove membership from Image Version [DELETE]

  + Response 204 (application/json)

## Image Version Membership Collection [/image_version_memberships{?version_id}]

+ Parameters
  + version_id (number, optional) ... 'id' of Image Version to filter by

+ Model (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 156,
                    "url": "https://atmobeta.iplantc.org/api/v2/image_version_memberships/156",
                    "image_version": {
                        "id": "d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                        "url": "https://atmobeta.iplantc.org/api/v2/image_versions/d4f30fb0-3b08-40fa-9075-e022b6cbd050",
                        "name": "1.0"
                    },
                    "group": {
                        "id": 1,
                        "uuid": "6139dc6d-0a50-4a83-9e6d-edf4b8e5d611",
                        "url": "https://atmobeta.iplantc.org/api/v2/groups/6139dc6d-0a50-4a83-9e6d-edf4b8e5d611",
                        "name": "example_group"
                    }
                }
            ]
        }

### List all Image Version Memberships [GET]

+ Response 200(application/json)

    [Image Version Membership Collection][]


### Add Membership to Image Version [POST]
Add an membership to a Image Version. You must specify the following properties:
- **image_version**: Image Version uuid
- **membership**: membership uuid

+ Request (application/json)

        {
            "image_version": "0005099e-bdbd-4964-9c81-e1a5a4788fc6",
            "membership": "d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6"
        }

+ Response 200 (application/json)

    [Image Version Membership][]

# Group Image Bookmarks
Image Bookmarks

## Image Bookmark [/image_bookmarks/{id}]
A single Image Bookmark object.

Each Image Bookmark has the following properties:

- **id**: id for the bookmark
- **image**: image bookmarked
- **user**: user who created the bookmark

+ Parameters
    + id (required, number) ... `id` of the Image Bookmark.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

        {
            "id": 1,
            "image": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "user": {
                "id": 1
            }
        }


### Retrieve an Image Bookmark [GET]
+ Response 200 (application/json)

    [Image Bookmark][]


### Delete an Image Bookmark [DELETE]
+ Response 204 (application/json)


## Image Bookmark Collection [/image_bookmarks]
Collection of all Image Bookmarks.

+ Model (application/json)

    JSON representation of Image Bookmark Resource.

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "url": "https://atmobeta.iplantc.org/api/v2/image_bookmarks/1",
                    "image": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "user": {
                        "id": 1
                    }
                }
            ]

### List all Image Bookmarks [GET]
+ Response 200 (application/json)

    [Image Bookmark Collection][]

### Create an Image Bookmark [POST]
You must specify the following properties. The user will be set to you.
- **image**: the image to bookmark

+ Request (application/json)

        {
            "image": 1
        }

+ Response 201 (application/json)

    [Image Bookmark][]

# Group Image Tags
An image tag is a link between an image and a tag

## Image Tag [/image_tags/{id}]
A single Image Tag object.

Each Image Tag has the following properties:

- **id**: id for the image tag
- **image**: image that is tagged
- **tag**: tag attached to image


+ Parameters
    + id (required, number) ... `id` of the Image Tag.

+ Model(application/json)

    + Body

        {
            "id": 1,
            "image": {
                "id": 1,
                "uuid": "f85e84e6-0851-57a5-a2dc-fb702e5a66a4"
            },
            "tag": {
                "id": 1
            }
        }


### Retrieve an Image Tag [GET]
+ Response 200 (application/json)

    [Image Tag][]

### Delete an Image Tag [DELETE]
+ Response 204 (application/json)

## Image Tag Collection [/image_tags{?application__id}]
Collection of all Image Tags.

+ Parameters
    + application__id (number, optional) ... return Image Tags belong to the Image with this 'id'

+ Model (application/json)

    JSON representation of Image Tag Collection Resource.

    + Body

        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "id": 1,
                "image": {
                    "id": 1,
                    "uuid": "f85e84e6-0851-57a5-a2dc-fb702e5a66a4"
                },
                "tag": {
                    "id": 1
                }
            }
        ]

### List all Image Tags [GET]
+ Response 200 (application/json)

    [Image Tag Collection][]

### Create an Image Tag [POST]
You must specify the following properties.
- **image**: the id of the image to tag
- **tag**: the id of the tag to apply

+ Request (application/json)

    {
        "image": 1,
        "tag": 1
    }
        
+ Response 200 (application/json)

    [Image Tag][]

# Group Metrics
Collect metrics on an instance. Currently metrics are stored in a 2 week
window, with a per minute granularity. This api can query for the following
instance metrics.

- cpu usage 
- memory 
- rx (bytes read over the network) 
- tx (bytes transferred) 
- state 

Metrics can be fetched with
varying resolution, and varying duration. Ex. you can get metrics every 5
minutes for the past week.


## Fetch metrics [/metrics/{uuid}.json{?field,res,size,fun}]
Fetch an instance's metrics over an interval of time

+ Parameters
    + uuid (required, string) - the uuid of the instance
    + field (required, enum(string)) - type of metric 

        + Members
            + `cpu` - the total cpu time the instance has been running 
            + `mem` - the memory consumed by the vm  
            + `rx` - bytes read over the network 
            + `tx` - bytes sent out over the network  
            + `state` - A numeral determining whether the vm is
active/suspended/shutoff

    + res (required, number) - number of minutes per datapoint
    + size (required, number) - number of datapoints
    + fun (optional, string) - transform the datapoints

        + Members
            + `perSecond` - Apply derivative to datapoints
    

+ Model(application/json)

    Here is an exapmle JSON response, for the following request:

    `metrics/7e17079c-2c31-4c22-8f31-8e4d22114e56.json?field=cpu&res=1&size=3`


    + Body

        [
            { 
                "target": "stats.sl1r2_iplantcollaborative_org.7e17079c-2c31-4c22-8f31-8e4d22114e56.cpu",
                "datapoints":[[238294.3,1443539820],[238311.9,1443539880],[null,1443539940]]
            },
        ]

### Fetch metrics [GET]
+ Response 200 (application/json)

    [Fetch metrics][]

# Group Instances
Instances are virtual machines that users have created from an image.  When a user creates an instance
 it immediately starts deducting AU's from their account.

## Instance [/instances/{id}]
A single Instance object.

Each Instance has the following properties:

- **id**: id
- **uuid**: unique id
- **name**: name of the instance
- **status**: the state the instance is in (active, suspended, shutoff, etc.)
- **size**: the size of the instance (number of CPUs, RAM, and Disk Space)
- **ip_address**: IP address you can use to connect to the machine.  Address that start with 196, 178, or 10 are private,
 all others are public.  Instances with an IP address of 0.0.0.0 have not been assigned an IP address yet.
- **shell**: true if a user can ssh into the instance
- **vnc**: true if a user can remote desktop into the instance
- **identity**: which account the instance deducts AU's from
- **user**: username for the person who created the instance
- **provider**: the provider the instance is on
- **image**: The specific version of an image the instance was created from
- **start_date**: date the instance was created
- **end_date**: end date of instance

+ Parameters
    + id (required, number) ... 'id' of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Resource.

    + Body

        {
            "id": 1,
            "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
            "name": "Ubuntu 12.04.5 - iPlant Base",
            "status": "suspended",
            "size": {
                "id": 23
            },
            "ip_address": "0.0.0.0",
            "shell": true,
            "vnc": true,
            "identity": {
                "id": 6512,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "user": {
                "id": 3178
            },
            "provider": {
                "id": 4,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "image": {
                "id": 868,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "start_date": "2015-02-16T19:24:26Z",
            "end_date": null
        }

### Retrieve an Instance [GET]

+ Response 200 (application/json)

    [Instance][]

### Update an Instance [PATCH]
You can update the following properties for instances you own:
- **name**: the name of the instance

+ Request (application/json)

    + Body
    
        {
            "name": "new name"
        }

+ Response 200 (application/json)

    [Instance][]

### Terminate an Instance [DELETE]
Terminate an instance.

+ Response 200 (application/json)

    [Instance][]


## Instance Collection [/instances]
Collection of all Instances
    
+ Model (application/json)

    JSON representation of Instances Collection Resource.

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
                    "name": "Ubuntu 12.04.5 - iPlant Base",
                    "status": "suspended",
                    "size": {
                        "id": 23
                    },
                    "ip_address": "0.0.0.0",
                    "shell": true,
                    "vnc": true,
                    "identity": {
                        "id": 6512,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "user": {
                        "id": 3178
                    },
                    "provider": {
                        "id": 4,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "image": {
                        "id": 868,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "start_date": "2015-02-16T19:24:26Z",
                    "end_date": null  
                }
            ]
        }
    
### List all Instances [GET]
Get a list of your instances.

+ Response 200 (application/json)

    [Instance Collection][]

### Create an Instance [POST]
To Create a new instance, you need to specify the following properties:
- **name**: The name of your new instance
- **identity**: The identity you want to use to create your instance. (This also determines what cloud provider you will be launching on)
- **size_alias**: The alias/identifier of the size/flavor you want when creating your instance.
- **source_alias**: The alias/identifier of the machine or volume that you want to use as the 'source' of your instance.
- **deploy**: _(Default: True)_ If true, run Ansible deployments on this instance. If false, the instance will show 'active' after a floating IP address has been associated.
- **project**: _(Optional)_ The UUID of the project that you want to add this instance to. (If not selected, you will be required to add it to a project in the Troposphere UI)
- **scripts**: _(Optional)_ A list of script IDs to be included/deployed with your instance after it has made it to 'active'.
- **extra**: _(Optional)_ This is a dictionary/map of additional key/value pairs. It is NOT required to launch, but can be used to adjust/fine-tune your instance launch. *DEVELOPERS/STAFF/ADVANCED USERS ONLY*

+ Request (application/json)

        {
            "identity": "b3c83812-10d8-4ae5-8f2a-dc922182e65e",
            "name": "My First Instance",
            "project": "fae4003e-7125-43b8-b466-c59b6a2d120a",
            "size_alias": "1",
            "source_alias": "d559c236-53ef-437a-999e-02ae16c4b5f0",
            "scripts": [],
            "deploy": true,
            "extra": {}
        }
+ Response 201 (application/json)
        {
            "provider_uuid": "d97037cf-2b2d-44a8-93cc-2a82c0ae193a",
            "identity": "b3c83812-10d8-4ae5-8f2a-dc922182e65e",
            "name": "My First Instance",
            "project": "fae4003e-7125-43b8-b466-c59b6a2d120a",
            "size_alias": "1",
            "source_alias": "d559c236-53ef-437a-999e-02ae16c4b5f0",
            "scripts": [],
            "deploy": true,
            "extra": {}
        }

    [Instance][]

# Group Instance Actions
Actions that can be performed on instances.

## Instance Action [/instances/{instance_id}/actions/{id}]
An action that can be performed on an instance, such as start, stop, suspend or delete.

Each Action has the following properties:

- **id**: id
- **name**: the name of the action
- **description**: a description of what the action does
    
+ Parameters
    + instance_id (required, string, '26f0795e-f80b-11e3-8ef5-b2227cce2b54') ... String `id` of the Instance.
    + id (required, string, '26f0795e-f80b-11e3-8ef5-b2227cce2b54') ... String `id` of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Resource.

    + Body

            {
                "id": "26f0123a-f80b-11d3-8ef5-b2227cce2b54",
                "name": "suspend",
                "description": "suspends an instance"
            }

    
## Instance Action Collection [/instances/{id}/actions]
Collection of all actions that can be performed on an instance.

+ Parameters
    + id (required, string, '26f0795e-f80b-11e3-8ef5-b2227cce2b54') ... String `alias` of the Instance.
    
+ Model (application/json)

    JSON representation of Instances Collection Resource.

    + Body

            [
                {
                    "id": "1",
                    "name": "start",
                    "description": "Start a stopped instance."
                },{
                    "id": "2",
                    "name": "stop",
                    "description": "Stop a running instance.  Stopped instances continue to reduce the AU's."
                },
                {
                    "id": "3",
                    "name": "suspend",
                    "description": "Suspend a running instance.  This will also stop subtracting AU's."
                },
                {
                  "id": "4",
                  "name": "resume",
                   "description": "Resume a suspended instance.  This will also start subtracting AU's again."
                }
            ]

### List all Instance Actions [GET]
List all actions that can be performed on an instance

+ Response 200 (application/json)

    [Instance Action Collection][]

### Execute an instance action [POST]
Perform the specified action on an instance

+ Response 204 (application/json)

    [Instance Action Collection][]

# Group Instance Histories
This endpoint returns a list of all instances that a user has launched since the time their account was created.

## Instance Histories [/instance_histories/{id}]
A single Instance History object.

Each Instance History object has the following properties:

- **id**: id
- **uuid**: unique id
- **url**: The URL for the details page for this instance history.
- **instance**: The instance object that 'owns' this history.
- **status**: The status name applied to this history.
- **size**: The instance size that was applied to this history.
- **provider**: The provider that created the instance (and its history).
- **image**: The image the instance was based off.
- **start_date**: the date the instance was launched
- **end_date**: the date the instance was deleted

    
+ Parameters
    + uuid (required, string, '36f0795e-f80b-11e3-8ef5-b2227cce2b55') ... String `uuid` of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Histories Resource.

    + Body

            {
                "id": 86732,
                "uuid": "a5c3b562-fecd-4f3b-abd6-7ac1ab5924d4",
                "url": "https://atmobeta.iplantc.org/api/v2/instance_histories/a5c3b562-fecd-4f3b-abd6-7ac1ab5924d4",
                "instance": {
                    "id": 21513,
                    "uuid": "edf972fb-81f4-4425-a0eb-c427caeb46d7",
                    "url": "https://atmobeta.iplantc.org/api/v2/instances/edf972fb-81f4-4425-a0eb-c427caeb46d7",
                    "name": "austin localdev",
                    "status": "suspended",
                    "ip_address": "0.0.0.0",
                    "shell": false,
                    "vnc": false,
                    "user": 1,
                    "provider": 6,
                    "start_date": "2015-10-08T15:49:18Z",
                    "end_date": null
                },
                "status": "suspended",
                "size": {
                    "id": 122,
                    "uuid": "2d60f4d1-8cb4-4248-80fe-b560a5f7f1e7",
                    "url": "https://atmobeta.iplantc.org/api/v2/sizes/2d60f4d1-8cb4-4248-80fe-b560a5f7f1e7",
                    "alias": "1",
                    "name": "tiny",
                    "cpu": 1,
                    "disk": 0,
                    "mem": 4096,
                    "active": true,
                    "start_date": "2014-10-29T18:18:17.492359Z",
                    "end_date": null
                },
                "provider": {
                    "id": 6,
                    "uuid": "d9ec29bb-b93c-430d-8f1b-29217c6348d4",
                    "url": "https://atmobeta.iplantc.org/api/v2/providers/d9ec29bb-b93c-430d-8f1b-29217c6348d4",
                    "name": "iPlant Cloud - Austin",
                    "description": "Reserved for image developers, tool developers, and prepublication preparation. Allocation is granted by separate science committee, based on availability and the nature of the project.",
                    "public": false,
                    "active": true,
                    "start_date": "2014-10-29T18:15:13.712495Z",
                    "end_date": null
                },
                "image": {
                    "id": 1192,
                    "url": "https://atmobeta.iplantc.org/api/v2/images/3ef5fc54-b9db-4977-b82e-6ee9d14e8419",
                    "uuid": "3ef5fc54-b9db-4977-b82e-6ee9d14e8419",
                    "name": "Ubuntu 12.04 Unity GUI v2",
                    "description": "Imported Application - Ubuntu 12.04 Unity GUI v2",
                    "icon": null,
                    "start_date": "2015-09-24T23:26:03.611509Z",
                    "end_date": null,
                    "user": 1926
                },
                "start_date": "2015-10-30T03:12:03.436847Z",
                "end_date": null
                "end_date": null
            }

### Retrieve an Instance Histories [GET]
Get a specific instance history object.

+ Response 200 (application/json)

    [Instance Histories][]

## Instance Histories Collection [/instance_histories]
The history of all of the user's instances since the date their account was created.
    
+ Model (application/json)

    JSON representation of Instances Histories Collection Resource.

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 86732,
                        "uuid": "a5c3b562-fecd-4f3b-abd6-7ac1ab5924d4",
                        "url": "https://atmobeta.iplantc.org/api/v2/instance_histories/a5c3b562-fecd-4f3b-abd6-7ac1ab5924d4",
                        "instance": {
                            "id": 21513,
                            "uuid": "edf972fb-81f4-4425-a0eb-c427caeb46d7",
                            "url": "https://atmobeta.iplantc.org/api/v2/instances/edf972fb-81f4-4425-a0eb-c427caeb46d7",
                            "name": "austin localdev",
                            "status": "suspended",
                            "ip_address": "0.0.0.0",
                            "shell": false,
                            "vnc": false,
                            "user": 1,
                            "provider": 6,
                            "start_date": "2015-10-08T15:49:18Z",
                            "end_date": null
                        },
                        "status": "suspended",
                        "size": {
                            "id": 122,
                            "uuid": "2d60f4d1-8cb4-4248-80fe-b560a5f7f1e7",
                            "url": "https://atmobeta.iplantc.org/api/v2/sizes/2d60f4d1-8cb4-4248-80fe-b560a5f7f1e7",
                            "alias": "1",
                            "name": "tiny",
                            "cpu": 1,
                            "disk": 0,
                            "mem": 4096,
                            "active": true,
                            "start_date": "2014-10-29T18:18:17.492359Z",
                            "end_date": null
                        },
                        "provider": {
                            "id": 6,
                            "uuid": "d9ec29bb-b93c-430d-8f1b-29217c6348d4",
                            "url": "https://atmobeta.iplantc.org/api/v2/providers/d9ec29bb-b93c-430d-8f1b-29217c6348d4",
                            "name": "iPlant Cloud - Austin",
                            "description": "Reserved for image developers, tool developers, and prepublication preparation. Allocation is granted by separate science committee, based on availability and the nature of the project.",
                            "public": false,
                            "active": true,
                            "start_date": "2014-10-29T18:15:13.712495Z",
                            "end_date": null
                        },
                        "image": {
                            "id": 1192,
                            "url": "https://atmobeta.iplantc.org/api/v2/images/3ef5fc54-b9db-4977-b82e-6ee9d14e8419",
                            "uuid": "3ef5fc54-b9db-4977-b82e-6ee9d14e8419",
                            "name": "Ubuntu 12.04 Unity GUI v2",
                            "description": "Imported Application - Ubuntu 12.04 Unity GUI v2",
                            "icon": null,
                            "start_date": "2015-09-24T23:26:03.611509Z",
                            "end_date": null,
                            "user": 1926
                        },
                        "start_date": "2015-10-30T03:12:03.436847Z",
                        "end_date": null
                    }
                ]
            }
    
### List all Instances [GET]
Get a list of all the instances the user has created.

+ Response 200 (application/json)

    [Instance Histories Collection][]


# Group Instance Tag
An instance tag is a link between an image and a tag

## Instance Tag [/instance_tags/{id}]
A single Instance Tag object.

Each Instance Tag has the following properties:

- **id**: id for the instance tag
- **instance**: instance tagged
- **tag**: tag applied to the instance


+ Parameters
    + id (required, number) ... `id` of the Instance Tag.

+ Model(application/json)

    JSON representation of Provider Resource

    + Body

            {
                "id": 1,
                "instance":{
                    "id": 1
                },
                "tag":{
                    "id": 1
                }
            }


### Retrieve an Instance Tag [GET]
+ Response 200 (application/json)

    [Instance Tag][]

### Delete an Instance Tag [DELETE]
+ Response 200 (application/json)

## Instance Tag Collection [/instance_tags{?instance__id}]
Collection of all Instance Tags.

+ Model (application/json)

    JSON representation of Instance Tag Collection Resource.

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "instance":{
                        "id": 1
                    },
                    "tag":{
                        "id": 1
                    }
                }
            ]

### List all Instance Tags [GET]


+ Parameters
    + instance__id (number, optional) ... `id` of the Instance.

+ Response 200 (application/json)

    [Instance Tag Collection][]

### Create an Instance Tag [POST]
You must specify the following properties.
- **image**: the id of the instance to tag
- **tag**: the id of the tag to apply

+ Request (application/json)

        {
            "instance": 1,
            "tag": 1
        }

+ Response 201 (application/json)

    [Instance Tag][]

# Group Licenses
Licenses are used to control who and how an instance gets used. Licenses are added by image creators. Once the image has been created, any user who wants to launch a copy of this instance will be required to agree to the license. All licenses are public and can seen by all users. Only the owner can edit or delete a license. Licenses that are deleted will also be removed from all images that previously required the license.

## License [/licenses/{id}]
A single License object.

Each License has the following properties:

- **id**: the id of the license *(DEPRECATED)*
- **uuid**: the uuid of the license
- **url**: the URL of the license
- **title**: the title of the license
- **text**: the contents of the license
- **type**: the type of the license *(Full Text or URL ONLY)*
- **created_by**: username of the user who created the license

+ Parameters
    + uuid (number, required) ... uuid of the License.
    
+ Model (application/json)

    JSON representation of License Resource.

    + Body
    
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/licenses/d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6",
            "uuid": "d4d143cc-bf99-4ec4-8d15-e0702d0f6ee6",
            "created_by": "example_user",
            "title": "Testing",
            "text": "Testing the update method",
            "type": {
                "id": 2,
                "name": "Full Text",
                "description": "A full-text copy of the license (HTML Okay)"
            }
        }

### Retrieve a License [GET]
+ Response 200 (application/json)

    [License][]
        
### Update a License [PATCH]
You can update the following properties for licenses you own:
- **title**: the title of the license
- **text**: the contents of the license
- **type**: the type of the license (Full Text or URL *ONLY*)

+ Request (application/json)
  
        {
            "title": "Updated license",
            "text": "https://atmobeta.iplantc.org/init_files/licenses/hello_world.py",
            "type": "URL"
        }

+ Response 200 (application/json)

    [License][]
    
### Delete a License [DELETE]
Delete a License.  Licenses can only be deleted if you were the one who created it. Deleteing a License will stop the
 boot script from being executed on any instances that have selected it again.

+ Response 200 (application/json)

    [License][]


## Licenses Collection [/licenses]
Collection of all Licenses.

+ Model (application/json)

    JSON representation of Licenses Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results":
            [
                {
                    "id": 1,
                    "uuid": "3f048788-258e-4819-be88-9271553cc2ce",
                    "url": "https://atmobeta.iplantc.org/api/v2/licenses/3f048788-258e-4819-be88-9271553cc2ce",
                    "created_by": "example_user",
                    "title": "Sample license",
                    "text": "#!/usr/bin/env python\nprint 'Hello World'",
                    "type": "Full Text"
                }
            ]
        }


### List all Licenses [GET]
+ Response 200 (application/json)

    [Licenses Collection][]

### Create a License [POST]
Create a License.  You must specify the following properties:
- **title**: the title of the license
- **text**: the contents of the license
- **type**: the type of the license (Full Text or URL *ONLY*)

+ Request (application/json)

        {
            "created_by": "example_user",
            "title": "Sample license",
            "text": "This is a license. It must be accepted before you can continue to launch your instance.
            "type": "Full Text"
        }

+ Response 201 (application/json)
  [License][]

# Group Maintenance Records
Maintenance Records are a way to inform the user of current or planned maintenance desks and possible downtown for the
 Atmosphere cloud.

##  Maintenance Record [/maintenance_records/{id}]
A single Maintenance Record object.

Each Maintenance Record has the following properties:

- **id**: the id of the record
- **url**: the url of the record details
- **title**: a short title for the type of outage (planned, unplanned, network outage, maintenance, etc.) (Internal Usage ONLY)
- **message**: the message that should be displayed to users.
- **provider_id**: the id of the provider this record is for (If null - Treat maintenance as *global* so it affects *all providers*)
- **disable_login**: whether login is disabled for the provider while this maintenance is occurring
- **start_date**: the date the machine_request was requested
- **end_date**: the date the machine_request was completed

+ Parameters
    + id (required, Number, 1) ... Number `id` of the Maintenance Record.
    
+ Model (application/json)

    JSON representation of Maintenance Record Resource.

    + Body

            {
                "id": 1,
                "title": "Planned Maintenance",
                "message": "Atmosphere Provider Cloud is under maintenance.",
                "provider_id": 1,
                "disable_login": true,
                "start_date": "2014-07-21T06:05:40Z",
                "end_date": null
            }

### Retrieve a Maintenance Record [GET]
+ Response 200 (application/json)

    [Maintenance Record][]

## Maintenance Record Collection [/maintenance_records?active=true]
Collection of all Maintenance Records. You must pass in active=true if you only want the current records.

+ Model (application/json)

    JSON representation of Maintenance Record Collection Resource.

    + Body

            [
                {
                    "id": 1,
                    "title": "Planned Maintenance",
                    "message": "Atmosphere Provider Cloud is under maintenance.",
                    "provider_id": 1,
                    "disable_login": true,
                    "start_date": "2014-07-21T06:05:40Z",
                    "end_date": null
                }
            ]

### List all Maintenance Records [GET]
+ Response 200 (application/json)

    [Maintenance Record Collection][]

### Create a Maintenance Record [POST]
To Create a new Maintenance record for the Atmosphere API, you need to specify the following properties:
- **title**: The title of the Maintenance Record
- **message**: The message that will be displayed to the user when they attempt to access the part of the API that is under maintenance.
- **disable_login**: _(Default: True)_ Disable users from logging in while this maintenance record is active.
- **provider**: _(optional)_ The ID of the provider you want the machine request to be created for. (If null, Maintenance record affects **ALL** providers)
- **start_date**: _(optional)_ The date/time to start the maitenance record. (If null, Maintenance record will start immediately)
- **end_date**: _(Optional)_ The date/time that the maintenance record will no longer be active. (If null, Maintenance record will be active indefinitely).

+ Request (application/json)

        {
            "start_date": "2016-01-01T00:00:00Z",
            "end_date": "2016-01-12T12:00:00Z",
            "title": "2016 Maintenance Record",
            "message": "Atmosphere is currently under maintenance.",
            "provider": null,
            "disable_login": true
        }
+ Response 201 (application/json)
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/maintenance_records/1",
            "start_date": "2016-01-01T00:00:00Z",
            "end_date": "2016-01-12T12:00:00Z",
            "title": "2016 Maintenance Record",
            "message": "Atmosphere is currently under maintenance.",
            "provider": null,
            "disable_login": true
        }

    [Maintenance Record][]

# Group Platform Types

## Platform Type [/platform_types/{id}]
A single Platform Type object.

Each Platform Type has the following properties:

- **id**: id for the Platform Type
- **name**: name of Platform Type
- **start_date**: date Platform Type was created
- **end_date**: date Platform Type was deleted


+ Parameters
    + id (required, number) ... Number `id` of the Platform Type.

+ Model(application/json)

    JSON representation of Platform Type Resource

    + Body

        {
            "id": 1,
            "name": "Xen",
            "start_date": "2013-10-18T07:00:00Z",
            "end_date": null
        }


### Retrieve a Platform Type [GET]
+ Response 200 (application/json)

    [Platform Type][]

## Platform Type Collection [/platform_types]
Collection of all Platform Types.

+ Model (application/json)

    JSON representation of Platform Type Collection Resource.

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "name": "Xen",
                    "start_date": "2013-10-18T07:00:00Z",
                    "end_date": null
                }
            ]
        }

### List all Platform Types [GET]
+ Response 200 (application/json)

    [Platform Type Collection][]

# Group Projects
Projects are a way for users to group related resources.  Right now users can add Instances and Volumes to a project, but
 we also plan to support adding documents, hyperlinks, Images, and letting users control access to their
 Projects (i.e. adding users, removing users, and specifying permissions such as read-only access or modifying content)

## Project [/projects/{id}]
A single Project object.

Each Project has the following properties:

- **id**: the id of the project
- **name**: project name
- **description**: project description
- **owner**: user who created the project
- **start_date**: date of project creation
- **end_date**: date of project deletion

+ Parameters
    + id (number, required) ... id of the Project.
    
+ Model (application/json)

    JSON representation of Project Resource.

    + Body
    
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/projects/1",
            "name": "project",
            "description": "my project full of things",
            "owner": {
                "id": 1
            },
            "start_date": "2015-03-16T19:32:18.070860Z",
            "end_date": null
        }

### Retrieve a Project [GET]
+ Response 200 (application/json)

    [Project][]
        
### Update a Project [PATCH]
You can update the following properties for projects you own:
- **name**: the name of the project
- **description**: the description of the project

+ Request (application/json)
  
        {
            "name": "new name",
            "description": "A new description for my project."
        }

+ Response 200 (application/json)

    [Project][]
    
### Delete a Project [DELETE]
Delete a Project.  Projects can only be deleted once all resources (instances and volumes) have been transferred out of
 it or deleted.  Attempting to delete a project with resources still inside will return a status code of 409 (conflict)

+ Response 200 (application/json)

    [Project][]


## Projects Collection [/projects]
Collection of all Projects.

+ Model (application/json)

    JSON representation of Projects Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results":
            [
                {
                    "id": 1,
                    "name": "project",
                    "description": "my project full of things",
                    "owner": {
                        "id": 1
                    },
                    "start_date": "2015-03-16T19:32:18.070860Z",
                    "end_date": null
                }
            ]
        }


### List all Projects [GET]
+ Response 200 (application/json)

    [Projects Collection][]

### Create a Project [POST]
Create a Project.  You must specify the following properties:
- **name**: a name for the project
- **description**: a description of the project

+ Request (application/json)

        {
            "name": "My Awesome Project",
            "description": "A description of my awesome project."
        }

+ Response 201 (application/json)
  [Project][]

# Group Project Instances

## Project Instance [/project_instances/{id}]
Get a single project instance

Each Project Instance has the following properties

- **id**: the id of the project instance
- **project**: project the instance is a part of
- **instance** instance that is part of the project

+ Parameters
  + id (number, required) ... 'id' of the Project Instance.

+ Model (application/json)

    JSON representation of Project Resource

    + Body
    
        {
            "id": 1,
            "project": {
                "id": 1
            },
            "instance": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            }
        }

### Retrieve a single Project Instance [GET]

+ Response 200 (application/json)

    [Project Instance][]

### Remove Instance from Project [DELETE]

  + Response 204 (application/json)

## Project Instance Collection [/project_instances{?project__id}]

+ Parameters
  + project__id (number, optional) ... 'id' of project to filter by

+ Model (application/json)

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "project": {
                        "id": 1
                    },
                    "instance": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    }
                }
            ]
        }

### List all project instances [GET]

+ Response 200(application/json)

    [Project Instance Collection][]


### Add Instance to Project [POST]
Add an instance to a project. You must specify the following properties:
- **project**: project id
- **instance**: instance id

+ Request (application/json)

        {
            "project": 1,
            "instance": 1
        }

+ Response 200 (application/json)

    [Project Instance][]

# Group Project Volumes

## Project Volume [/project_volumes/{id}]
A single Project Volume object

Each Project Volume has the following properties:
- **id**: id of project volume relationship
- **project**: project with volume attached
- **volume**: volume attached to project

+ Parameters
    + id (required, number) ... 'id' of the Project Volume

+ Model (application/json)

    JSON representation of Project Volume resource

    + Body

        {
            "id": 1,
            "project": {
                "id": 1
            },
            "volume": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            }
        }

### Retrieve a Project Volume resource [GET]

+ Response 200 (application/json)
    [Project Volume][]

### Delete a Project Volume [DELETE]

+ Response 204 (application/json)


## Project Volume Collection [/project_volumes{?project__id}]
Collection of all project volume relationships

+ Parameters
    +project__id (number, optional) ... 'id' of the Project

+ Model (application/json)
    JSON representation of Project Volume collection

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "project": {
                        "id": 1
                    },
                    "volume": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    }
                }
            ]
        }


### Get all Project Volumes [GET]

+ Response 200(application/json)

  [Project Volume Collection][]


### Add Volume to Project [POST]
Add a volume to a project. You must specify the following properties:
- **project**: project id
- **volume**: volume id

+ Request (application/json)

        {
            "project": 1,
            "volume": 1
        }

+ Response 200 (application/json)

    [Project Volume Collection][]

# Group Providers
Providers represent the different cloud providers managed by Atmosphere.

## Provider [/providers/{id}]
A single Provider object.

Each Provider has the following properties:

- **id**: the id for the provider
- **uuid**: uuid for provider
- **name**: name of the provider
- **description**: description of the provider
- **public**: if provider is publicly accessible
- **active**: if provider is active
- **type**: type of provider
- **virtualization**: type of virtualization
- **sizes**: sizes available on this provider
- **start_date**: provider start date
- **end_date**: provider end date


+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
          {
              "id": 4,
              "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
              "name": "iPlant Cloud - Tucson",
              "description": "<No Description Provided>",
              "public": true,
              "active": true,
              "type": {
                  "id": 2
              },
              "virtualization": {
                  "id": 2
              },
              "start_date": "2014-02-04T19:09:20.713175Z",
              "end_date": null
          }


### Retrieve a Provider [GET]
+ Response 200 (application/json)

    [Provider][]

## Provider Collection [/providers]
Collection of all Providers.

+ Model (application/json)

    + Body
    
          {
              "count": 1,
              "next": null,
              "previous": null,
              "results": [
               {
                    "id": 4,
                    "uuid": "f268aebc-d956-11e4-b9d6-1681e6b88ec1",
                    "name": "iPlant Cloud - Tucson",
                    "description": "<No Description Provided>",
                    "public": true,
                    "active": true,
                    "type": {
                        "id": 2
                    },
                    "virtualization": {
                        "id": 2
                    },
                    "start_date": "2014-02-04T19:09:20.713175Z",
                    "end_date": null
               }
              ]
          }
            
### List all Providers [GET]
+ Response 200 (application/json)

    [Provider Collection][]

# Group Provider Machines
Represent the physical virtual machine snapshot that gets launched on a provider.  Whether a provider_machine exists
for a given image and provider determines whether that image can be launched on that provider.
 
## Provider Machine [/provider_machines/{id}]
A single Provider Machine object.

Each Provider Machine has the following properties:

- **id**: the id for the provider machine
- **uuid**: uuid for the provider machine
- **image**: image installed on this provider machine
- **provider**: provider this machine is a part of
- **created_by**: user who created this machine
- **start_date**: date of machine creation
- **end_date**: date of machine termination

+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
        {
            "id": 1,
            "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
            "image": {
                "id": 196,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "provider": {
                "id": 1,
                "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
            },
            "created_by": {
                "id": 1586
            },
            "start_date": "2013-07-25T07:00:00Z",
            "end_date": null
        }

### Retrieve a Provider Machine [GET]
+ Response 200 (application/json)

    [Provider Machine][]

## Provider Machine Collection [/provider_machines]
Collection of all Provider Machines.

+ Model (application/json)

    + Body

            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5",
                    "image": {
                        "id": 196,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "provider": {
                        "id": 1,
                        "uuid": "923222d2-a508-4b2c-b19e-00a29f1a5bb5"
                    },
                    "created_by": {
                        "id": 1586
                    },
                    "start_date": "2013-07-25T07:00:00Z",
                    "end_date": null
                }
            ]

### List all Provider Machines [GET]
+ Response 200 (application/json)

    [Provider Machine Collection][]

# Group Provider Types
The types of cloud providers that Atmosphere supports (OpenStack, Eucalyptus, Amazon EC2, etc.)

## Provider Type [/provider_types/{id}]
A single Provider Type object.

Each Provider Type has the following properties:

- **id**: id for the provider type
- **name**: text name of provider type
- **start_date**: date of provider type creation
- **end_date**: date of provider type deletion

+ Parameters
    + id (number, required) ... `id` of the Provider.

+ Model(application/json)

    + Body
    
        {
            "id": 1,
            "name": "OpenStack",
            "start_date": "2012-10-29T23:21:36.253000Z",
            "end_date": null
        }

### Retrieve a Provider Type [GET]
+ Response 200 (application/json)

    [Provider Type][]

## Provider Type Collection [/provider_machines]
Collection of all Provider Types.

+ Model (application/json)

    JSON representation of Provider Type Collection Resource.

    + Body

        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
              "id": 1,
              "name": "OpenStack",
              "start_date": "2012-10-29T23:21:36.253000Z",
              "end_date": null
            }
        ]

### List all Provider Machines [GET]
+ Response 200 (application/json)

    [Provider Type Collection][]

# Group Quota
Quotas are available resource allocations on Atmosphere.  They determine the maximum amount of combined CPU, memory,
disk and number of volumes that a user can launch.
**NOTE: Quotas are visible to Staff and CloudAdministrators ONLY**

## Quota [/quotas/{id}]
A single Quota object.

Each quota has the following properties:

- **id**: the id of the quota
- **cpu**: CPUs allotted to quota
- **memory**: Memory allotted to quota
- **storage**: Storage allotted to quota
- **storage_count**: number of storage units allotted to quota
- **suspended_count**: quota suspended count

+ Parameters
    + id (number, required) ... `id` of the quota.
    
+ Model (application/json)

    + Body

        {
            "id": 2,
            "cpu": 12,
            "memory": 32,
            "storage": 50,
            "storage_count": 1,
            "suspended_count": 2
        }

### Retrieve a quota [GET]
+ Response 200 (application/json)

    [Quota][]

## Quota Collection [/quotas]
Collection of all Quotas.

+ Model (application/json)

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 2,
                        "cpu": 12,
                        "memory": 32,
                        "storage": 50,
                        "storage_count": 1,
                        "suspended_count": 2
                    }
                ]
            }

### List all Quotas [GET]
+ Response 200 (application/json)

    [Quota Collection][]

# Group Resource Requests
Resource requests are made by users who require more than the default amount of allocation units or machine sizes

Each resource request has the following properties:
- **id**: the id of the request
- **uuid**: the UUID of the request
- **request**: the request itself
- **description**: user's reason for making the request
- **status**: the current status of the request
- **created_by**: the user who created the request
- **user**: the user whom this request is for
- **identity**: the user's identity for the provider the request was made for
- **provider**: the provider the user made the request for
- **admin_message**: the admin's response to the request
- **quota**: the new quota set after the request has been acted on
- **alocation**: the new allocation set after the request has been acted on
- **current_quota**: the id of user's current quota
- **current_allocation**: the id of the user's current allocation




## Resource Requests Collection [/resource_requests{?status__name}]

### List all Resource Requests [GET]

+ Parameters
    + status__name (string, optional) ... 'name' of status type eg. 'approved' or 'pending'

+ Response 200 (application/json)
{
    "count": 1,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 1,
            "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            "request": "1000 AU",
            "description": "To do things X and Y",
            "status": {
                "id": 1,
                "name": "pending"
            },
            "created_by": {
                "id": 0000,
                "username": "username"
            },
            "user": {
                "id": 0000,
                "username": "username"
            },
            "identity": {
                "id": "0",
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511"
                "provider": 4
            },
            "provider": {
                "id": 4,
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            },
            "admin_message": "",
            "quota": null,
            "allocation": null,
            "current_quota": 25,
            "current_allocation": 9
        }
    ]
}

### Create a Resource Request [POST]
Authenticated users can create resource requests by sending a POST request with the following info:
- **request**: Textual representation of what the user is asking for, eg. A 4 CPU instance running for one week, or an additional 200 AU.
- **description**: More in-depth explanation of why the user is requesting these resources
- **identity**: id of the identity the resources are being requested for

+ Request (application/json)
    + Body
        {
            "request": '100 AU',
            "description": "to do more science",
            "identity": 1
        }

+ Response 201 (application/json)

## Resource Request [/resource_requests/{id}]
A single Resource Request object with all its details.

+ Parameters
    + id (required, number, 1) ... Number `id` of the Resource Request.

### Retrieve a Resource Request [GET]
+ Response 200 (application/json)

    + Body
         {
            "id": 1,
            "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            "request": "1000 AU",
            "description": "To do things X and Y",
            "status": {
                "id": 1,
                "name": "pending"
            },
            "created_by": {
                "id": 0000,
                "username": "username"
            },
            "user": {
                "id": 0000,
                "username": "username"
            },
            "identity": {
                "id": "0",
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511"
                "provider": 4
            },
            "provider": {
                "id": 4,
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            },
            "admin_message": "",
            "quota": null,
            "allocation": null,
            "current_quota": 25,
            "current_allocation": 9
        }   

### Update a Resource Request [PATCH]
Admins can update the following properties for a resource request:
- **quota**: the user's new quota
- **allocation**: the user's new allocation
- **status**: the request's new status
- **admin_message**: the response to the request, which will be emailed to the user

+ Request (application/json)

    + Body
    
        {
            "quota": 1,
            "allocation": 1,
            "status": 4,
            "admin_message": "We have approved your request."
        }

+ Response 200 (application/json)
    
    + Body
         {
            "id": 1,
            "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            "request": "1000 AU",
            "description": "To do things X and Y",
            "status": {
                "id": 4,
                "name": "approved"
            },
            "created_by": {
                "id": 0000,
                "username": "username"
            },
            "user": {
                "id": 0000,
                "username": "username"
            },
            "identity": {
                "id": "0",
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511"
                "provider": 4
            },
            "provider": {
                "id": 4,
                "uuid": "748b002b-894e-43c6-a0a4-c5945dd5e511",
            },
            "admin_message": "We have approved your request",
            "quota": 1,
            "allocation": 1,
            "current_quota": 1,
            "current_allocation": 1
        }

# Group Service Unavailable -UI testing only-
Endpoint to test UI response when Atmosphere goes under maintenance and returns a 503 status code.

##  Service Unavailable [/service_unavailable]

+ Model (application/json)

    + Body

          {
              "message": "Service unavailable"
          }

### Retrieve Unavailable Service [GET]
+ Response 503 (application/json)

  [Service Unavailable][]

# Group Sizes
Sizes represent the different instance configurations offered by that cloud provider.  Each configuration includes the
 number of CPUs, memory, and disk space.  Sizes with fewer resources will consume AUs at a slower rate.

## Size Collection [/sizes{?provider__id}]
    
### List all Sizes [GET]

+ Parameters
    + provider__id (number, optional) ... `id` of the Provider.

+ Response 200 (application/json)


        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "alias": "3",
                    "name": "small1",
                    "cpu": 2,
                    "disk": 0,
                    "mem": 8192,
                    "active": true,
                    "provider": {
                        "id": 1,
                        "uuid": "9e002b3c-d7d2-11e4-8cb8-8bda92940e85"
                    },
                    "start_date": "2014-02-04T21:04:30Z",
                    "end_date": null
                }
            ]
        }
        
## Size [/size/{id}]
A single Size object with all its details.

+ Parameters
    + id (required, number, 1) ... Number `id` of the Size.

### Retrieve a Size [GET]
+ Response 200 (application/json)

    + Body

            {
                "id": 1,
                "alias": "3",
                "name": "small1",
                "cpu": 2,
                "disk": 0,
                "mem": 8192,
                "active": true,
                "provider": {
                    "id": 1,
                    "uuid": "9e002b3c-d7d2-11e4-8cb8-8bda92940e85"
                },
                "start_date": "2014-02-04T21:04:30Z",
                "end_date": null
            }

# Group Status Types
Status Types are an enumeration of all possible 'states' of a 'Request' object in Atmosphere. Example states are "pending", "closed", "approved", and "rejected".

## Status Type [/status_types/{id}]
A single Status Type object.

Each Status Type has the following properties:

- **id**: id for the status type
- **url**: url for the status type
- **uuid**: uuid for the status type
- **name**: text name of status type
- **description**: Longer decription of when/how this status type is used.
- **start_date**: date of status type creation
- **end_date**: date of status type deletion

+ Parameters
    + id (number, required) ... `id` of the Status Type.

+ Model(application/json)

    + Body
    
        {
            "id": 1,
            "url": "https://atmobeta.iplantc.org/api/v2/status_types/e69f3223-f64d-46e7-a933-c2d68f7088ec",
            "uuid": "e69f3223-f64d-46e7-a933-c2d68f7088ec",
            "name": "pending",
            "description": "",
            "start_date": "2015-01-26T07:00:00Z",
            "end_date": null
        }

### Retrieve a Status Type [GET]
+ Response 200 (application/json)

    [Status Type][]

## Status Type Collection [/status_types]
Collection of all Status Types.

+ Model (application/json)

    JSON representation of Status Type Collection Resource.

    + Body

        "count": 1,
        "next": null,
        "previous": null,
        "results": [
            {
                "id": 1,
                "url": "https://atmobeta.iplantc.org/api/v2/status_types/e69f3223-f64d-46e7-a933-c2d68f7088ec",
                "uuid": "e69f3223-f64d-46e7-a933-c2d68f7088ec",
                "name": "pending",
                "description": "",
                "start_date": "2015-01-26T07:00:00Z",
                "end_date": null
            }
        ]

### List all Status Types [GET]
+ Response 200 (application/json)

    [Status Type Collection][]

# Group Tags
Tags are small labels users can apply to various resources and are primarily used to help focus searches.

## Tag [/tags/{id}]
A single Tag object.

Each Tag has the following properties:

- **id**: the id of the tag
- **name**: the name of the tag
- **description**: a description of what the tag means

+ Parameters
    + id (number, required) ... `id` of the Tag.
    
+ Model (application/json)

    + Body

            {
                "id": 5,
                "name": "Ubuntu",
                "description": "A description of Ubuntu"
            }

### Retrieve a Tag [GET]
+ Response 200 (application/json)

    [Tag][]

### Update a Tag [PATCH]
Currently only Atmosphere staff can update tag information. The following properties can be updated:
- **name**: a name of the tag
- **description**: a description of the tag

+ Request (application/json)

        {
            name: "new-name",
            description: "new description of tag"
        }

+ Response 200 (application/json)

    [Tag][]


### Delete a Tag [DELETE]

+ Response 204 (application/json)


## Tag Collection [/tags]
Collection of all Tags.

+ Model (application/json)

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": 1,
                        "name": "SpliceGrapher",
                        "description": "A description of SpliceGrapher"
                    }
                ]
            }

### List all Tags [GET]
+ Response 200 (application/json)

    [Tag Collection][]

### Create a Tag [POST]
Create a Tag.  You must specify the following properties:
- **name**: a name for the tag
- **description**: a description of the tag

+ Request (application/json)

        {
            "name": "Tag name",
            "description": "A description of the tag."
        }

+ Response 201 (application/json)

    [Tag][]

# Group Tokens
Tokens are used to gain API or UI access to Atmosphere.

## Token [/tokens/{key}]
A single Token object.

Each Token has the following properties:

- **key**: the key of the token
- **url**: the key of the token detail page
- **user**: the owner of the token
- **issuedTime**: The datetime that the token was created
- **issuer**: How this token was created *This field can be null*
- **expireTime**: The datetime that this token will expire *This field can be null*
- **remote_ip**: The IP address of the request that created *This field can be null*
- **api_server_url**: What API server is this token scoped to? *This field can be null*

+ Parameters
    + key (number, required) ... `key` of the Token.
    
+ Model (application/json)

    + Body

            {
                "key": "TGT-5028365-cwkmbeSTOtX9Tbi0hAehRVoGVmeNwrp60fgl7vRM5SRWGm0HSA-auth.iplantc.org",
                "url": "https://atmobeta.iplantc.org/api/v2/tokens/TGT-5028365-cwkmbeSTOtX9Tbi0hAehRVoGVmeNwrp60fgl7vRM5SRWGm0HSA-auth.iplantc.org",
                "user": {
                    "id": 1,
                    "uuid": "333fe333-7c12-45a8-b15f-e75a75963d64",
                    "url": "https://atmobeta.iplantc.org/api/v2/users/333fe333-7c12-45a8-b15f-e75a75963d64",
                    "username": "example_user"
                },
                "api_server_url": null,
                "remote_ip": null,
                "issuer": null,
                "issuedTime": "2015-10-30T03:11:59.733913Z",
                "expireTime": null
            }

### Retrieve a Token [GET]
+ Response 200 (application/json)

    [Token][]

### Update a Token [PATCH]
Currently only Atmosphere staff can update token information. The following properties can be updated:
- **user**: a user of the token
- **issuer**: a description of the token

+ Request (application/json)

        {
            user: "new-user",
            issuer: "new description of token"
        }

+ Response 200 (application/json)

    [Token][]


### Delete a Token [DELETE]

+ Response 204 (application/json)


## Token Collection [/tokens]
Collection of all Tokens.

+ Model (application/json)

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "key": "TGT-5028365-cwkmbeSTOtX9Tbi0hAehRVoGVmeNwrp60fgl7vRM5SRWGm0HSA-auth.iplantc.org",
                        "url": "https://atmobeta.iplantc.org/api/v2/tokens/TGT-5028365-cwkmbeSTOtX9Tbi0hAehRVoGVmeNwrp60fgl7vRM5SRWGm0HSA-auth.iplantc.org",
                        "user": {
                            "id": 1,
                            "uuid": "333fe333-7c12-45a8-b15f-e75a75963d64",
                            "url": "https://atmobeta.iplantc.org/api/v2/users/333fe333-7c12-45a8-b15f-e75a75963d64",
                            "username": "example_user"
                        },
                        "api_server_url": null,
                        "remote_ip": null,
                        "issuer": null,
                        "issuedTime": "2015-10-30T03:11:59.733913Z",
                        "expireTime": null
                    }
                ]
            }

### List current Tokens [GET]
+ Response 200 (application/json)

    [Token Collection][]

# Group Users

## User [/users/{id}]
A single User object.

Each Instance has the following properties:

- **id**: id of the user
- **url**: url of the user
- **username**: username of user

+ Parameters
    + id (number, required) ... 'id' of the Instance.
    
+ Model (application/json)

    JSON representation of Instance Resource.

    + Body

      {
        "id": 1,
        "url": "https://atmobeta.iplantc.org/api/v2/users/1337f0ef-a112-45a8-b15f-e75a75963d64",
        "username": "example_user",
      }

### Retrieve a User [GET]
Get a specific user.

+ Response 200 (application/json)

    [User][]


## User Collection [/users]
Collection of all Users
    
+ Model (application/json)

    JSON representation of Instances Collection Resource.

    + Body

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1,
                    "url": "https://atmobeta.iplantc.org/api/v2/users/1337f0ef-a112-45a8-b15f-e75a75963d64",
                    "username": "example_user",
                }
            ]
        }
    
### List all Users [GET]

+ Response 200 (application/json)

    [User Collection][]

# Group Version
The version endpoint allows users to see the version of Atmosphere they are currently using. The Troposphere version can be viewed at https://iplantc.org/tropo-api/version

## Atmosphere Version [/version]
Retrieve the current Atmosphere version

+ Model (application/json)

    + Body
            {
               "git_sha": "d95baa954c53583452b207de0f7bcc4de633976",
                "git_sha_abbrev": "@d95baa",
                "short": "0.14.3",
                "verbose": "0.14.3 dev 0 @d95baa",
                "normal": "0.14.3 dev 0",
                "commit_date": "2016-01-06T10:24:22-07:00",
                "git_branch": "kicking-kestrel",
                "branch": "0.14",
                "tertiary": ".3" 
            }

### Retrieve Atmosphere version [GET]
+ Response 200 (application/json)

    [Atmosphere Version][]


## Troposphere Version [/version]
Retrieve the current Troposphere version

+ Model (application/json)

    + Body
            {
                git_sha": "3f524b5c3eac7262925ca9bad39931efb8b9eb1", 
                "git_sha_abbrev": "@3f524b", 
                "git_branch": "kicking-kestrel", 
                "commit_date": "2016-01-05T16:42:22-07:00"
            }

### Retrieve Troposphere version [GET]
+ Response 200 (application/json)
       
    [Troposphere Version][]


# Group Volumes
Volumes are network based storage that a user can attach to any instance.  They can then be detached and attached to a
 different instance.

## Volume [/volumes/{id}]
A single Volume object.

Each Volume has the following properties:

- **id**: id for the volume
- **uuid**: uuid for the volume
- **name**: name of volume
- **size**: id of size of volume
- **user**: user the volume belongs to
- **provider**: provider volume is stored on
- **identity**: identity of volume
- **start_date**: date of volume creation
- **end_date**: date of volume deletion

+ Parameters
    + id (number, required) ... id of the Volume.
    
+ Model (application/json)

    + Body
    
        {
            "id": 1483,
            "uuid": "7ef79cdd-9ac6-4202-8057-7069748c8a0f",
            "name": "name",
            "size": 4,
            "user": {
                "id": 3178
            },
            "provider": {
                "id": 4,
                "uuid": "9cfe2f92-9416-5e0b-a00f-94076df25ef3"
            },
            "identity": {
                "id": 6512,
                "uuid": "f712fa8c-8371-5ffd-a91a-532ef316d3f4"
            },
            "projects": [],
            "start_date": "2015-02-16T19:53:36.190034Z",
            "end_date": null
        }


### Retrieve a Volume [GET]
+ Response 200 (application/json)

    [Volume][]

### Update a Volume [PATCH]
You can update the following properties for volumes you own:
- **name**: the name of the volume

+ Request (application/json)

    + Body
    
        {
            name: "new name"
        }
    [Volume][]

### Terminate a Volume [DELETE]
Terminate a volume.

+ Response 200 (application/json)

    [Volume][]


## Volume Collection [/volumes]
Collection of all Volumes.
    
+ Model (application/json)

    + Body
    
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": 1483,
                    "uuid": "7ef79cdd-9ac6-4202-8057-7069748c8a0f",
                    "name": "name",
                    "size": 4,
                    "user": {
                        "id": 3178
                    },
                    "provider": {
                        "id": 4,
                        "uuid": "9cfe2f92-9416-5e0b-a00f-94076df25ef3"
                    },
                    "identity": {
                        "id": 6512,
                        "uuid": "f712fa8c-8371-5ffd-a91a-532ef316d3f4"
                    },
                    "start_date": "2015-02-16T19:53:36.190034Z",
                    "end_date": null
                }
            ]
        }
    
### List all Volumes [GET]
+ Response 200 (application/json)

    [Volume Collection][]
